08:28:25 - info: Listening on port: 8080
08:34:15 - info: Listening on port: 8080
08:34:21 - info: Listening on port: 8080
08:37:02 - info: Listening on port: 8080
08:37:07 - error:  ReferenceError: bcrypt is not defined
    at Function.User.createModel (/home/ecarzoglio/Documents/node-ex/app/models/user.js:41:5)
    at exports.create (/home/ecarzoglio/Documents/node-ex/app/controllers/users.js:14:8)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:137:13)
    at Route.dispatch (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:112:3)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:281:22
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at logger (/home/ecarzoglio/Documents/node-ex/node_modules/morgan/index.js:144:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:317:13)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at /home/ecarzoglio/Documents/node-ex/node_modules/body-parser/lib/read.js:130:5
    at invokeCallback (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:224:16)
    at done (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:213:7)
    at IncomingMessage.onEnd (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:273:7)
    at IncomingMessage.emit (events.js:180:13)
    at endReadableNT (_stream_readable.js:1106:12)
    at process._tickCallback (internal/process/next_tick.js:178:19)
08:45:26 - info: Listening on port: 8080
08:45:39 - error:  ReferenceError: saltRounds is not defined
    at Function.User.createModel (/home/ecarzoglio/Documents/node-ex/app/models/user.js:43:28)
    at exports.create (/home/ecarzoglio/Documents/node-ex/app/controllers/users.js:14:8)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:137:13)
    at Route.dispatch (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:112:3)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:281:22
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at logger (/home/ecarzoglio/Documents/node-ex/node_modules/morgan/index.js:144:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:317:13)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at /home/ecarzoglio/Documents/node-ex/node_modules/body-parser/lib/read.js:130:5
    at invokeCallback (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:224:16)
    at done (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:213:7)
    at IncomingMessage.onEnd (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:273:7)
    at IncomingMessage.emit (events.js:180:13)
    at endReadableNT (_stream_readable.js:1106:12)
    at process._tickCallback (internal/process/next_tick.js:178:19)
08:46:01 - info: Listening on port: 8080
08:48:26 - info: Listening on port: 8080
08:51:07 - info: Listening on port: 8080
08:52:33 - info: Listening on port: 8080
08:54:59 - info: Listening on port: 8080
08:55:04 - error:  TypeError: Cannot read property 'then' of undefined
    at exports.create (/home/ecarzoglio/Documents/node-ex/app/controllers/users.js:15:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:137:13)
    at Route.dispatch (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:112:3)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:281:22
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at logger (/home/ecarzoglio/Documents/node-ex/node_modules/morgan/index.js:144:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:317:13)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at /home/ecarzoglio/Documents/node-ex/node_modules/body-parser/lib/read.js:130:5
    at invokeCallback (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:224:16)
    at done (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:213:7)
    at IncomingMessage.onEnd (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:273:7)
    at IncomingMessage.emit (events.js:180:13)
    at endReadableNT (_stream_readable.js:1106:12)
    at process._tickCallback (internal/process/next_tick.js:178:19)
08:57:52 - error:  TypeError: Cannot read property 'then' of undefined
    at exports.create (/home/ecarzoglio/Documents/node-ex/app/controllers/users.js:15:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:137:13)
    at Route.dispatch (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:112:3)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:281:22
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at logger (/home/ecarzoglio/Documents/node-ex/node_modules/morgan/index.js:144:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:317:13)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at /home/ecarzoglio/Documents/node-ex/node_modules/body-parser/lib/read.js:130:5
    at invokeCallback (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:224:16)
    at done (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:213:7)
    at IncomingMessage.onEnd (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:273:7)
    at IncomingMessage.emit (events.js:180:13)
    at endReadableNT (_stream_readable.js:1106:12)
    at process._tickCallback (internal/process/next_tick.js:178:19)
08:58:56 - info: Listening on port: 8080
09:03:48 - info: Listening on port: 8080
09:03:54 - error:  TypeError: Cannot read property 'then' of undefined
    at exports.create (/home/ecarzoglio/Documents/node-ex/app/controllers/users.js:15:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:137:13)
    at Route.dispatch (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:112:3)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:281:22
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at logger (/home/ecarzoglio/Documents/node-ex/node_modules/morgan/index.js:144:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:317:13)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at /home/ecarzoglio/Documents/node-ex/node_modules/body-parser/lib/read.js:130:5
    at invokeCallback (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:224:16)
    at done (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:213:7)
    at IncomingMessage.onEnd (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:273:7)
    at IncomingMessage.emit (events.js:180:13)
    at endReadableNT (_stream_readable.js:1106:12)
    at process._tickCallback (internal/process/next_tick.js:178:19)
09:04:41 - info: Listening on port: 8080
09:04:44 - error:  TypeError: Cannot read property 'then' of undefined
    at exports.create (/home/ecarzoglio/Documents/node-ex/app/controllers/users.js:15:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:137:13)
    at Route.dispatch (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:112:3)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:281:22
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at logger (/home/ecarzoglio/Documents/node-ex/node_modules/morgan/index.js:144:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:317:13)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at /home/ecarzoglio/Documents/node-ex/node_modules/body-parser/lib/read.js:130:5
    at invokeCallback (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:224:16)
    at done (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:213:7)
    at IncomingMessage.onEnd (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:273:7)
    at IncomingMessage.emit (events.js:180:13)
    at endReadableNT (_stream_readable.js:1106:12)
    at process._tickCallback (internal/process/next_tick.js:178:19)
09:05:23 - info: Listening on port: 8080
09:05:25 - error:  TypeError: Cannot read property 'then' of undefined
    at exports.create (/home/ecarzoglio/Documents/node-ex/app/controllers/users.js:15:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:137:13)
    at Route.dispatch (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:112:3)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:281:22
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at logger (/home/ecarzoglio/Documents/node-ex/node_modules/morgan/index.js:144:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:317:13)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at /home/ecarzoglio/Documents/node-ex/node_modules/body-parser/lib/read.js:130:5
    at invokeCallback (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:224:16)
    at done (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:213:7)
    at IncomingMessage.onEnd (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:273:7)
    at IncomingMessage.emit (events.js:180:13)
    at endReadableNT (_stream_readable.js:1106:12)
    at process._tickCallback (internal/process/next_tick.js:178:19)
09:05:37 - info: Listening on port: 8080
09:08:04 - error:  TypeError: Cannot read property 'then' of undefined
    at exports.create (/home/ecarzoglio/Documents/node-ex/app/controllers/users.js:15:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:137:13)
    at Route.dispatch (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:112:3)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:281:22
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at logger (/home/ecarzoglio/Documents/node-ex/node_modules/morgan/index.js:144:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:317:13)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at /home/ecarzoglio/Documents/node-ex/node_modules/body-parser/lib/read.js:130:5
    at invokeCallback (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:224:16)
    at done (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:213:7)
    at IncomingMessage.onEnd (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:273:7)
    at IncomingMessage.emit (events.js:180:13)
    at endReadableNT (_stream_readable.js:1106:12)
    at process._tickCallback (internal/process/next_tick.js:178:19)
09:08:16 - info: Listening on port: 8080
09:21:50 - info: Listening on port: 8080
09:25:14 - info: Listening on port: 8080
09:25:22 - error:  TypeError: Cannot read property 'then' of undefined
    at exports.create (/home/ecarzoglio/Documents/node-ex/app/controllers/users.js:15:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:137:13)
    at Route.dispatch (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:112:3)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:281:22
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at logger (/home/ecarzoglio/Documents/node-ex/node_modules/morgan/index.js:144:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:317:13)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at /home/ecarzoglio/Documents/node-ex/node_modules/body-parser/lib/read.js:130:5
    at invokeCallback (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:224:16)
    at done (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:213:7)
    at IncomingMessage.onEnd (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:273:7)
    at IncomingMessage.emit (events.js:180:13)
    at endReadableNT (_stream_readable.js:1106:12)
    at process._tickCallback (internal/process/next_tick.js:178:19)
09:26:44 - info: Listening on port: 8080
09:29:26 - info: Listening on port: 8080
09:30:29 - info: Listening on port: 8080
09:30:51 - info: Listening on port: 8080
09:31:29 - info: Listening on port: 8080
09:32:32 - info: Listening on port: 8080
09:32:34 - info: Listening on port: 8080
09:34:46 - info: Listening on port: 8080
09:35:09 - error:  
{ message: 
   [ { message: 'User.firstName cannot be null',
       type: 'notNull Violation',
       path: 'firstName',
       value: null,
       origin: 'CORE',
       instance: 
        { dataValues: 
           { id: null,
             updatedAt: 2018-06-12T12:35:08.927Z,
             createdAt: 2018-06-12T12:35:08.927Z },
          _previousDataValues: {},
          _changed: {},
          _modelOptions: 
           { timestamps: true,
             validate: {},
             freezeTableName: false,
             underscored: false,
             underscoredAll: false,
             paranoid: false,
             rejectOnEmpty: false,
             whereCollection: null,
             schema: null,
             schemaDelimiter: '',
             defaultScope: {},
             scopes: [],
             indexes: [],
             name: { plural: 'Users', singular: 'User' },
             omitNull: false,
             sequelize: 
              { options: 
                 { dialect: 'postgres',
                   dialectModulePath: null,
                   host: 'localhost',
                   protocol: 'tcp',
                   define: {},
                   query: {},
                   sync: {},
                   timezone: '+00:00',
                   logging: [Function: bound consoleCall],
                   omitNull: false,
                   native: false,
                   replication: false,
                   ssl: undefined,
                   pool: {},
                   quoteIdentifiers: true,
                   hooks: {},
                   retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
                   transactionType: 'DEFERRED',
                   isolationLevel: null,
                   databaseVersion: '9.4.0',
                   typeValidation: false,
                   benchmark: false,
                   operatorsAliases: true,
                   username: 'ecarzoglio',
                   password: '123456',
                   database: 'nodedb' },
                config: 
                 { database: 'nodedb',
                   username: 'ecarzoglio',
                   password: '123456',
                   host: 'localhost',
                   port: 5432,
                   pool: 
                    { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]["options"]["pool"]' },
                   protocol: 'tcp',
                   native: false,
                   ssl: undefined,
                   replication: false,
                   dialectModulePath: null,
                   keepDefaultTimezone: undefined,
                   dialectOptions: undefined },
                dialect: 
                 { sequelize: 
                    { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]' },
                   connectionManager: 
                    { sequelize: 
                       { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]' },
                      config: 
                       { database: 'nodedb',
                         username: 'ecarzoglio',
                         password: '123456',
                         host: 'localhost',
                         port: undefined,
                         pool: 
                          { max: 5,
                            min: 0,
                            idle: 10000,
                            acquire: 10000,
                            evict: 10000,
                            handleDisconnects: true,
                            validate: [Function: bound _validate],
                            Promise: 
                             { [Function: Promise]
                               TypeError: [Function: TypeError],
                               RangeError: [Function: RangeError],
                               CancellationError: [Function: SubError],
                               TimeoutError: [Function: SubError],
                               OperationalError: [Function: OperationalError],
                               RejectionError: [Function: OperationalError],
                               AggregateError: [Function: SubError],
                               _peekContext: [Function],
                               onPossiblyUnhandledRejection: [Function],
                               onUnhandledRejectionHandled: [Function],
                               longStackTraces: [Function],
                               hasLongStackTraces: [Function],
                               config: [Function],
                               getNewLibraryCopy: [Function],
                               is: [Function],
                               fromCallback: [Function],
                               fromNode: [Function],
                               all: [Function],
                               cast: [Function],
                               fulfilled: [Function],
                               resolve: [Function],
                               rejected: [Function],
                               reject: [Function],
                               setScheduler: [Function],
                               pending: [Function],
                               defer: [Function],
                               method: [Function],
                               try: [Function],
                               attempt: [Function],
                               bind: [Function],
                               PromiseInspection: [Function: PromiseInspection],
                               join: [Function],
                               Promise: [Circular],
                               version: '3.5.1',
                               map: [Function],
                               using: [Function],
                               delay: [Function],
                               coroutine: { [Function] addYieldHandler: [Function] },
                               spawn: [Function],
                               promisify: [Function],
                               promisifyAll: [Function],
                               props: [Function],
                               race: [Function],
                               reduce: [Function],
                               settle: [Function],
                               some: [Function],
                               _SomePromiseArray: [Function: SomePromiseArray],
                               filter: [Function],
                               each: [Function],
                               mapSeries: [Function: PromiseMapSeries],
                               any: [Function],
                               default: [Circular] } },
                         protocol: 'tcp',
                         native: false,
                         ssl: undefined,
                         replication: false,
                         dialectModulePath: null,
                         keepDefaultTimezone: undefined,
                         dialectOptions: undefined,
                         user: 'ecarzoglio' },
                      dialect: 
                       { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]["dialect"]' },
                      versionPromise: null,
                      dialectName: 'postgres',
                      pool: 
                       { _events: {},
                         _eventsCount: 0,
                         _maxListeners: undefined,
                         _config: 
                          { fifo: true,
                            priorityRange: 1,
                            testOnBorrow: true,
                            testOnReturn: false,
                            autostart: false,
                            acquireTimeoutMillis: 10000,
                            max: 5,
                            min: 0,
                            evictionRunIntervalMillis: 10000,
                            numTestsPerEvictionRun: 3,
                            softIdleTimeoutMillis: -1,
                            idleTimeoutMillis: 10000,
                            Promise: 
                             { [Function: Promise]
                               TypeError: [Function: TypeError],
                               RangeError: [Function: RangeError],
                               CancellationError: [Function: SubError],
                               TimeoutError: [Function: SubError],
                               OperationalError: [Function: OperationalError],
                               RejectionError: [Function: OperationalError],
                               AggregateError: [Function: SubError],
                               _peekContext: [Function],
                               onPossiblyUnhandledRejection: [Function],
                               onUnhandledRejectionHandled: [Function],
                               longStackTraces: [Function],
                               hasLongStackTraces: [Function],
                               config: [Function],
                               getNewLibraryCopy: [Function],
                               is: [Function],
                               fromCallback: [Function],
                               fromNode: [Function],
                               all: [Function],
                               cast: [Function],
                               fulfilled: [Function],
                               resolve: [Function],
                               rejected: [Function],
                               reject: [Function],
                               setScheduler: [Function],
                               pending: [Function],
                               defer: [Function],
                               method: [Function],
                               try: [Function],
                               attempt: [Function],
                               bind: [Function],
                               PromiseInspection: [Function: PromiseInspection],
                               join: [Function],
                               Promise: [Circular],
                               version: '3.5.1',
                               map: [Function],
                               using: [Function],
                               delay: [Function],
                               coroutine: { [Function] addYieldHandler: [Function] },
                               spawn: [Function],
                               promisify: [Function],
                               promisifyAll: [Function],
                               props: [Function],
                               race: [Function],
                               reduce: [Function],
                               settle: [Function],
                               some: [Function],
                               _SomePromiseArray: [Function: SomePromiseArray],
                               filter: [Function],
                               each: [Function],
                               mapSeries: [Function: PromiseMapSeries],
                               any: [Function],
                               default: [Circular] } },
                         _Promise: 
                          { [Function: Promise]
                            TypeError: [Function: TypeError],
                            RangeError: [Function: RangeError],
                            CancellationError: [Function: SubError],
                            TimeoutError: [Function: SubError],
                            OperationalError: [Function: OperationalError],
                            RejectionError: [Function: OperationalError],
                            AggregateError: [Function: SubError],
                            _peekContext: [Function],
                            onPossiblyUnhandledRejection: [Function],
                            onUnhandledRejectionHandled: [Function],
                            longStackTraces: [Function],
                            hasLongStackTraces: [Function],
                            config: [Function],
                            getNewLibraryCopy: [Function],
                            is: [Function],
                            fromCallback: [Function],
                            fromNode: [Function],
                            all: [Function],
                            cast: [Function],
                            fulfilled: [Function],
                            resolve: [Function],
                            rejected: [Function],
                            reject: [Function],
                            setScheduler: [Function],
                            pending: [Function],
                            defer: [Function],
                            method: [Function],
                            try: [Function],
                            attempt: [Function],
                            bind: [Function],
                            PromiseInspection: [Function: PromiseInspection],
                            join: [Function],
                            Promise: [Circular],
                            version: '3.5.1',
                            map: [Function],
                            using: [Function],
                            delay: [Function],
                            coroutine: { [Function] addYieldHandler: [Function] },
                            spawn: [Function],
                            promisify: [Function],
                            promisifyAll: [Function],
                            props: [Function],
                            race: [Function],
                            reduce: [Function],
                            settle: [Function],
                            some: [Function],
                            _SomePromiseArray: [Function: SomePromiseArray],
                            filter: [Function],
                            each: [Function],
                            mapSeries: [Function: PromiseMapSeries],
                            any: [Function],
                            default: [Circular] },
                         _factory: 
                          { create: [Function: create],
                            destroy: [Function: destroy],
                            validate: [Function: bound _validate] },
                         _draining: false,
                         _started: true,
                         _waitingClientsQueue: 
                          { _size: 1,
                            _slots: [ { _list: { head: null, tail: null, length: 0 } } ] },
                         _factoryCreateOperations: {},
                         _factoryDestroyOperations: {},
                         _availableObjects: { _list: { head: null, tail: null, length: 0 } },
                         _testOnBorrowResources: {},
                         _testOnReturnResources: {},
                         _validationOperations: {},
                         _allObjects: {},
                         _resourceLoans: {},
                         _evictionIterator: 
                          { _list: 
                             { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]["dialect"]["connectionManager"]["pool"]["_availableObjects"]["_list"]' },
                            _direction: 'next',
                            _startPosition: 'head',
                            _started: true,
                            _cursor: 
                             { prev: null,
                               next: null,
                               data: 
                                { creationTime: 1528806886846,
                                  lastReturnTime: 1528806886859,
                                  lastBorrowTime: 1528806886858,
                                  lastIdleTime: 1528806886859,
                                  obj: 
                                   { _events: { end: [Function], error: [Function] },
                                     _eventsCount: 2,
                                     _maxListeners: undefined,
                                     connectionParameters: 
                                      { user: 'ecarzoglio',
                                        database: 'nodedb',
                                        port: 5432,
                                        host: 'localhost',
                                        password: '123456',
                                        binary: false,
                                        ssl: false,
                                        client_encoding: '',
                                        replication: undefined,
                                        isDomainSocket: false,
                                        application_name: undefined,
                                        fallback_application_name: undefined,
                                        statement_timeout: false },
                                     user: 'ecarzoglio',
                                     database: 'nodedb',
                                     port: 5432,
                                     host: 'localhost',
                                     password: '123456',
                                     replication: undefined,
                                     _types: 
                                      { _types: { getTypeParser: [Function: bound getTypeParser] },
                                        text: {},
                                        binary: {} },
                                     _ending: true,
                                     _connecting: false,
                                     _connected: true,
                                     _connectionError: false,
                                     connection: 
                                      { _events: 
                                         { newListener: [Function],
                                           connect: [Function],
                                           sslconnect: [Function],
                                           authenticationCleartextPassword: [Function],
                                           authenticationMD5Password: [Function],
                                           readyForQuery: [Function],
                                           notice: [Function],
                                           rowDescription: [Function],
                                           dataRow: [Function],
                                           portalSuspended: [Function],
                                           emptyQuery: [Function],
                                           commandComplete: [Function],
                                           parseComplete: [Function],
                                           copyInResponse: [Function],
                                           copyData: [Function],
                                           notification: [Function],
                                           error: [Function: connectedErrorHandler] },
                                        _eventsCount: 17,
                                        _maxListeners: undefined,
                                        stream: 
                                         { connecting: false,
                                           _hadError: false,
                                           _handle: null,
                                           _parent: null,
                                           _host: 'localhost',
                                           _readableState: 
                                            { objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: false,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              destroyed: true,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: false,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events: 
                                            { finish: [Function: onSocketFinish],
                                              end: [ [Function: onReadableStreamEnd], [Function] ],
                                              connect: [Function],
                                              error: [Function: reportStreamError],
                                              close: [Function],
                                              data: [Function] },
                                           _eventsCount: 6,
                                           _maxListeners: undefined,
                                           _writableState: 
                                            { objectMode: false,
                                              highWaterMark: 16384,
                                              finalCalled: false,
                                              needDrain: false,
                                              ending: true,
                                              ended: true,
                                              finished: true,
                                              destroyed: true,
                                              decodeStrings: false,
                                              defaultEncoding: 'utf8',
                                              length: 0,
                                              writing: false,
                                              corked: 0,
                                              sync: false,
                                              bufferProcessing: false,
                                              onwrite: [Function: bound onwrite],
                                              writecb: null,
                                              writelen: 0,
                                              bufferedRequest: null,
                                              lastBufferedRequest: null,
                                              pendingcb: 0,
                                              prefinished: true,
                                              errorEmitted: false,
                                              bufferedRequestCount: 0,
                                              corkedRequestsFree: 
                                               { next: null,
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] } },
                                           writable: false,
                                           _bytesDispatched: 1100,
                                           _sockname: null,
                                           _pendingData: null,
                                           _pendingEncoding: '',
                                           allowHalfOpen: false,
                                           server: null,
                                           _server: null,
                                           write: [Function: writeAfterFIN],
                                           _idleNext: null,
                                           _idlePrev: null,
                                           _idleTimeout: -1 },
                                        _keepAlive: false,
                                        lastBuffer: false,
                                        lastOffset: 0,
                                        buffer: null,
                                        offset: 1,
                                        encoding: 'utf8',
                                        parsedStatements: {},
                                        writer: 
                                         { size: 1024,
                                           buffer: 
                                            { '0': 81,
                                              '1': 0,
                                              '2': 0,
                                              '3': 0,
                                              '4': 95,
                                              '5': 83,
                                              '6': 69,
                                              '7': 76,
                                              '8': 69,
                                              '9': 67,
                                              '10': 84,
                                              '11': 32,
                                              '12': 34,
                                              '13': 110,
                                              '14': 97,
                                              '15': 109,
                                              '16': 101,
                                              '17': 34,
                                              '18': 32,
                                              '19': 70,
                                              '20': 82,
                                              '21': 79,
                                              '22': 77,
                                              '23': 32,
                                              '24': 34,
                                              '25': 83,
                                              '26': 101,
                                              '27': 113,
                                              '28': 117,
                                              '29': 101,
                                              '30': 108,
                                              '31': 105,
                                              '32': 122,
                                              '33': 101,
                                              '34': 77,
                                              '35': 101,
                                              '36': 116,
                                              '37': 97,
                                              '38': 34,
                                              '39': 32,
                                              '40': 65,
                                              '41': 83,
                                              '42': 32,
                                              '43': 34,
                                              '44': 83,
                                              '45': 101,
                                              '46': 113,
                                              '47': 117,
                                              '48': 101,
                                              '49': 108,
                                              '50': 105,
                                              '51': 122,
                                              '52': 101,
                                              '53': 77,
                                              '54': 101,
                                              '55': 116,
                                              '56': 97,
                                              '57': 34,
                                              '58': 32,
                                              '59': 79,
                                              '60': 82,
                                              '61': 68,
                                              '62': 69,
                                              '63': 82,
                                              '64': 32,
                                              '65': 66,
                                              '66': 89,
                                              '67': 32,
                                              '68': 34,
                                              '69': 83,
                                              '70': 101,
                                              '71': 113,
                                              '72': 117,
                                              '73': 101,
                                              '74': 108,
                                              '75': 105,
                                              '76': 122,
                                              '77': 101,
                                              '78': 77,
                                              '79': 101,
                                              '80': 116,
                                              '81': 97,
                                              '82': 34,
                                              '83': 46,
                                              '84': 34,
                                              '85': 110,
                                              '86': 97,
                                              '87': 109,
                                              '88': 101,
                                              '89': 34,
                                              '90': 32,
                                              '91': 65,
                                              '92': 83,
                                              '93': 67,
                                              '94': 59,
                                              '95': 0,
                                              '96': 83,
                                              '97': 32,
                                              '98': 105,
                                              '99': 110,
                                              '100': 100,
                                              '101': 107,
                                              '102': 101,
                                              '103': 121,
                                              '104': 44,
                                              '105': 32,
                                              '106': 97,
                                              '107': 114,
                                              '108': 114,
                                              '109': 97,
                                              '110': 121,
                                              '111': 95,
                                              '112': 97,
                                              '113': 103,
                                              '114': 103,
                                              '115': 40,
                                              '116': 97,
                                              '117': 46,
                                              '118': 97,
                                              '119': 116,
                                              '120': 116,
                                              '121': 110,
                                              '122': 117,
                                              '123': 109,
                                              '124': 41,
                                              '125': 32,
                                              '126': 97,
                                              '127': 115,
                                              '128': 32,
                                              '129': 99,
                                              '130': 111,
                                              '131': 108,
                                              '132': 117,
                                              '133': 109,
                                              '134': 110,
                                              '135': 95,
                                              '136': 105,
                                              '137': 110,
                                              '138': 100,
                                              '139': 101,
                                              '140': 120,
                                              '141': 101,
                                              '142': 115,
                                              '143': 44,
                                              '144': 32,
                                              '145': 97,
                                              '146': 114,
                                              '147': 114,
                                              '148': 97,
                                              '149': 121,
                                              '150': 95,
                                              '151': 97,
                                              '152': 103,
                                              '153': 103,
                                              '154': 40,
                                              '155': 97,
                                              '156': 46,
                                              '157': 97,
                                              '158': 116,
                                              '159': 116,
                                              '160': 110,
                                              '161': 97,
                                              '162': 109,
                                              '163': 101,
                                              '164': 41,
                                              '165': 32,
                                              '166': 65,
                                              '167': 83,
                                              '168': 32,
                                              '169': 99,
                                              '170': 111,
                                              '171': 108,
                                              '172': 117,
                                              '173': 109,
                                              '174': 110,
                                              '175': 95,
                                              '176': 110,
                                              '177': 97,
                                              '178': 109,
                                              '179': 101,
                                              '180': 115,
                                              '181': 44,
                                              '182': 32,
                                              '183': 112,
                                              '184': 103,
                                              '185': 95,
                                              '186': 103,
                                              '187': 101,
                                              '188': 116,
                                              '189': 95,
                                              '190': 105,
                                              '191': 110,
                                              '192': 100,
                                              '193': 101,
                                              '194': 120,
                                              '195': 100,
                                              '196': 101,
                                              '197': 102,
                                              '198': 40,
                                              '199': 105,
                                              '200': 120,
                                              '201': 46,
                                              '202': 105,
                                              '203': 110,
                                              '204': 100,
                                              '205': 101,
                                              '206': 120,
                                              '207': 114,
                                              '208': 101,
                                              '209': 108,
                                              '210': 105,
                                              '211': 100,
                                              '212': 41,
                                              '213': 32,
                                              '214': 65,
                                              '215': 83,
                                              '216': 32,
                                              '217': 100,
                                              '218': 101,
                                              '219': 102,
                                              '220': 105,
                                              '221': 110,
                                              '222': 105,
                                              '223': 116,
                                              '224': 105,
                                              '225': 111,
                                              '226': 110,
                                              '227': 32,
                                              '228': 70,
                                              '229': 82,
                                              '230': 79,
                                              '231': 77,
                                              '232': 32,
                                              '233': 112,
                                              '234': 103,
                                              '235': 95,
                                              '236': 99,
                                              '237': 108,
                                              '238': 97,
                                              '239': 115,
                                              '240': 115,
                                              '241': 32,
                                              '242': 116,
                                              '243': 44,
                                              '244': 32,
                                              '245': 112,
                                              '246': 103,
                                              '247': 95,
                                              '248': 99,
                                              '249': 108,
                                              '250': 97,
                                              '251': 115,
                                              '252': 115,
                                              '253': 32,
                                              '254': 105,
                                              '255': 44,
                                              '256': 32,
                                              '257': 112,
                                              '258': 103,
                                              '259': 95,
                                              '260': 105,
                                              '261': 110,
                                              '262': 100,
                                              '263': 101,
                                              '264': 120,
                                              '265': 32,
                                              '266': 105,
                                              '267': 120,
                                              '268': 44,
                                              '269': 32,
                                              '270': 112,
                                              '271': 103,
                                              '272': 95,
                                              '273': 97,
                                              '274': 116,
                                              '275': 116,
                                              '276': 114,
                                              '277': 105,
                                              '278': 98,
                                              '279': 117,
                                              '280': 116,
                                              '281': 101,
                                              '282': 32,
                                              '283': 97,
                                              '284': 32,
                                              '285': 87,
                                              '286': 72,
                                              '287': 69,
                                              '288': 82,
                                              '289': 69,
                                              '290': 32,
                                              '291': 116,
                                              '292': 46,
                                              '293': 111,
                                              '294': 105,
                                              '295': 100,
                                              '296': 32,
                                              '297': 61,
                                              '298': 32,
                                              '299': 105,
                                              '300': 120,
                                              '301': 46,
                                              '302': 105,
                                              '303': 110,
                                              '304': 100,
                                              '305': 114,
                                              '306': 101,
                                              '307': 108,
                                              '308': 105,
                                              '309': 100,
                                              '310': 32,
                                              '311': 65,
                                              '312': 78,
                                              '313': 68,
                                              '314': 32,
                                              '315': 105,
                                              '316': 46,
                                              '317': 111,
                                              '318': 105,
                                              '319': 100,
                                              '320': 32,
                                              '321': 61,
                                              '322': 32,
                                              '323': 105,
                                              '324': 120,
                                              '325': 46,
                                              '326': 105,
                                              '327': 110,
                                              '328': 100,
                                              '329': 101,
                                              '330': 120,
                                              '331': 114,
                                              '332': 101,
                                              '333': 108,
                                              '334': 105,
                                              '335': 100,
                                              '336': 32,
                                              '337': 65,
                                              '338': 78,
                                              '339': 68,
                                              '340': 32,
                                              '341': 97,
                                              '342': 46,
                                              '343': 97,
                                              '344': 116,
                                              '345': 116,
                                              '346': 114,
                                              '347': 101,
                                              '348': 108,
                                              '349': 105,
                                              '350': 100,
                                              '351': 32,
                                              '352': 61,
                                              '353': 32,
                                              '354': 116,
                                              '355': 46,
                                              '356': 111,
                                              '357': 105,
                                              '358': 100,
                                              '359': 32,
                                              '360': 65,
                                              '361': 78,
                                              '362': 68,
                                              '363': 32,
                                              '364': 116,
                                              '365': 46,
                                              '366': 114,
                                              '367': 101,
                                              '368': 108,
                                              '369': 107,
                                              '370': 105,
                                              '371': 110,
                                              '372': 100,
                                              '373': 32,
                                              '374': 61,
                                              '375': 32,
                                              '376': 39,
                                              '377': 114,
                                              '378': 39,
                                              '379': 32,
                                              '380': 97,
                                              '381': 110,
                                              '382': 100,
                                              '383': 32,
                                              '384': 116,
                                              '385': 46,
                                              '386': 114,
                                              '387': 101,
                                              '388': 108,
                                              '389': 110,
                                              '390': 97,
                                              '391': 109,
                                              '392': 101,
                                              '393': 32,
                                              '394': 61,
                                              '395': 32,
                                              '396': 39,
                                              '397': 83,
                                              '398': 101,
                                              '399': 113,
                                              '400': 117,
                                              '401': 101,
                                              '402': 108,
                                              '403': 105,
                                              '404': 122,
                                              '405': 101,
                                              '406': 77,
                                              '407': 101,
                                              '408': 116,
                                              '409': 97,
                                              '410': 39,
                                              '411': 32,
                                              '412': 71,
                                              '413': 82,
                                              '414': 79,
                                              '415': 85,
                                              '416': 80,
                                              '417': 32,
                                              '418': 66,
                                              '419': 89,
                                              '420': 32,
                                              '421': 105,
                                              '422': 46,
                                              '423': 114,
                                              '424': 101,
                                              '425': 108,
                                              '426': 110,
                                              '427': 97,
                                              '428': 109,
                                              '429': 101,
                                              '430': 44,
                                              '431': 32,
                                              '432': 105,
                                              '433': 120,
                                              '434': 46,
                                              '435': 105,
                                              '436': 110,
                                              '437': 100,
                                              '438': 101,
                                              '439': 120,
                                              '440': 114,
                                              '441': 101,
                                              '442': 108,
                                              '443': 105,
                                              '444': 100,
                                              '445': 44,
                                              '446': 32,
                                              '447': 105,
                                              '448': 120,
                                              '449': 46,
                                              '450': 105,
                                              '451': 110,
                                              '452': 100,
                                              '453': 105,
                                              '454': 115,
                                              '455': 112,
                                              '456': 114,
                                              '457': 105,
                                              '458': 109,
                                              '459': 97,
                                              '460': 114,
                                              '461': 121,
                                              '462': 44,
                                              '463': 32,
                                              '464': 105,
                                              '465': 120,
                                              '466': 46,
                                              '467': 105,
                                              '468': 110,
                                              '469': 100,
                                              '470': 105,
                                              '471': 115,
                                              '472': 117,
                                              '473': 110,
                                              '474': 105,
                                              '475': 113,
                                              '476': 117,
                                              '477': 101,
                                              '478': 44,
                                              '479': 32,
                                              '480': 105,
                                              '481': 120,
                                              '482': 46,
                                              '483': 105,
                                              '484': 110,
                                              '485': 100,
                                              '486': 107,
                                              '487': 101,
                                              '488': 121,
                                              '489': 32,
                                              '490': 79,
                                              '491': 82,
                                              '492': 68,
                                              '493': 69,
                                              '494': 82,
                                              '495': 32,
                                              '496': 66,
                                              '497': 89,
                                              '498': 32,
                                              '499': 105,
                                              '500': 46,
                                              '501': 114,
                                              '502': 101,
                                              '503': 108,
                                              '504': 110,
                                              '505': 97,
                                              '506': 109,
                                              '507': 101,
                                              '508': 59,
                                              '509': 0,
                                              '510': 0,
                                              '511': 0,
                                              '512': 0,
                                              '513': 0,
                                              '514': 0,
                                              '515': 0,
                                              '516': 0,
                                              '517': 0,
                                              '518': 0,
                                              '519': 0,
                                              '520': 0,
                                              '521': 0,
                                              '522': 0,
                                              '523': 0,
                                              '524': 0,
                                              '525': 0,
                                              '526': 0,
                                              '527': 0,
                                              '528': 0,
                                              '529': 0,
                                              '530': 0,
                                              '531': 0,
                                              '532': 0,
                                              '533': 0,
                                              '534': 0,
                                              '535': 0,
                                              '536': 0,
                                              '537': 0,
                                              '538': 0,
                                              '539': 0,
                                              '540': 0,
                                              '541': 0,
                                              '542': 0,
                                              '543': 0,
                                              '544': 0,
                                              '545': 0,
                                              '546': 0,
                                              '547': 0,
                                              '548': 0,
                                              '549': 0,
                                              '550': 0,
                                              '551': 0,
                                              '552': 0,
                                              '553': 0,
                                              '554': 0,
                                              '555': 0,
                                              '556': 0,
                                              '557': 0,
                                              '558': 0,
                                              '559': 0,
                                              '560': 0,
                                              '561': 0,
                                              '562': 0,
                                              '563': 0,
                                              '564': 0,
                                              '565': 0,
                                              '566': 0,
                                              '567': 0,
                                              '568': 0,
                                              '569': 0,
                                              '570': 0,
                                              '571': 0,
                                              '572': 0,
                                              '573': 0,
                                              '574': 0,
                                              '575': 0,
                                              '576': 0,
                                              '577': 0,
                                              '578': 0,
                                              '579': 0,
                                              '580': 0,
                                              '581': 0,
                                              '582': 0,
                                              '583': 0,
                                              '584': 0,
                                              '585': 0,
                                              '586': 0,
                                              '587': 0,
                                              '588': 0,
                                              '589': 0,
                                              '590': 0,
                                              '591': 0,
                                              '592': 0,
                                              '593': 0,
                                              '594': 0,
                                              '595': 0,
                                              '596': 0,
                                              '597': 0,
                                              '598': 0,
                                              '599': 0,
                                              '600': 0,
                                              '601': 0,
                                              '602': 0,
                                              '603': 0,
                                              '604': 0,
                                              '605': 0,
                                              '606': 0,
                                              '607': 0,
                                              '608': 0,
                                              '609': 0,
                                              '610': 0,
                                              '611': 0,
                                              '612': 0,
                                              '613': 0,
                                              '614': 0,
                                              '615': 0,
                                              '616': 0,
                                              '617': 0,
                                              '618': 0,
                                              '619': 0,
                                              '620': 0,
                                              '621': 0,
                                              '622': 0,
                                              '623': 0,
                                              '624': 0,
                                              '625': 0,
                                              '626': 0,
                                              '627': 0,
                                              '628': 0,
                                              '629': 0,
                                              '630': 0,
                                              '631': 0,
                                              '632': 0,
                                              '633': 0,
                                              '634': 0,
                                              '635': 0,
                                              '636': 0,
                                              '637': 0,
                                              '638': 0,
                                              '639': 0,
                                              '640': 0,
                                              '641': 0,
                                              '642': 0,
                                              '643': 0,
                                              '644': 0,
                                              '645': 0,
                                              '646': 0,
                                              '647': 0,
                                              '648': 0,
                                              '649': 0,
                                              '650': 0,
                                              '651': 0,
                                              '652': 0,
                                              '653': 0,
                                              '654': 0,
                                              '655': 0,
                                              '656': 0,
                                              '657': 0,
                                              '658': 0,
                                              '659': 0,
                                              '660': 0,
                                              '661': 0,
                                              '662': 0,
                                              '663': 0,
                                              '664': 0,
                                              '665': 0,
                                              '666': 0,
                                              '667': 0,
                                              '668': 0,
                                              '669': 0,
                                              '670': 0,
                                              '671': 0,
                                              '672': 0,
                                              '673': 0,
                                              '674': 0,
                                              '675': 0,
                                              '676': 0,
                                              '677': 0,
                                              '678': 0,
                                              '679': 0,
                                              '680': 0,
                                              '681': 0,
                                              '682': 0,
                                              '683': 0,
                                              '684': 0,
                                              '685': 0,
                                              '686': 0,
                                              '687': 0,
                                              '688': 0,
                                              '689': 0,
                                              '690': 0,
                                              '691': 0,
                                              '692': 0,
                                              '693': 0,
                                              '694': 0,
                                              '695': 0,
                                              '696': 0,
                                              '697': 0,
                                              '698': 0,
                                              '699': 0,
                                              '700': 0,
                                              '701': 0,
                                              '702': 0,
                                              '703': 0,
                                              '704': 0,
                                              '705': 0,
                                              '706': 0,
                                              '707': 0,
                                              '708': 0,
                                              '709': 0,
                                              '710': 0,
                                              '711': 0,
                                              '712': 0,
                                              '713': 0,
                                              '714': 0,
                                              '715': 0,
                                              '716': 0,
                                              '717': 0,
                                              '718': 0,
                                              '719': 0,
                                              '720': 0,
                                              '721': 0,
                                              '722': 0,
                                              '723': 0,
                                              '724': 0,
                                              '725': 0,
                                              '726': 0,
                                              '727': 0,
                                              '728': 0,
                                              '729': 0,
                                              '730': 0,
                                              '731': 0,
                                              '732': 0,
                                              '733': 0,
                                              '734': 0,
                                              '735': 0,
                                              '736': 0,
                                              '737': 0,
                                              '738': 0,
                                              '739': 0,
                                              '740': 0,
                                              '741': 0,
                                              '742': 0,
                                              '743': 0,
                                              '744': 0,
                                              '745': 0,
                                              '746': 0,
                                              '747': 0,
                                              '748': 0,
                                              '749': 0,
                                              '750': 0,
                                              '751': 0,
                                              '752': 0,
                                              '753': 0,
                                              '754': 0,
                                              '755': 0,
                                              '756': 0,
                                              '757': 0,
                                              '758': 0,
                                              '759': 0,
                                              '760': 0,
                                              '761': 0,
                                              '762': 0,
                                              '763': 0,
                                              '764': 0,
                                              '765': 0,
                                              '766': 0,
                                              '767': 0,
                                              '768': 0,
                                              '769': 0,
                                              '770': 0,
                                              '771': 0,
                                              '772': 0,
                                              '773': 0,
                                              '774': 0,
                                              '775': 0,
                                              '776': 0,
                                              '777': 0,
                                              '778': 0,
                                              '779': 0,
                                              '780': 0,
                                              '781': 0,
                                              '782': 0,
                                              '783': 0,
                                              '784': 0,
                                              '785': 0,
                                              '786': 0,
                                              '787': 0,
                                              '788': 0,
                                              '789': 0,
                                              '790': 0,
                                              '791': 0,
                                              '792': 0,
                                              '793': 0,
                                              '794': 0,
                                              '795': 0,
                                              '796': 0,
                                              '797': 0,
                                              '798': 0,
                                              '799': 0,
                                              '800': 0,
                                              '801': 0,
                                              '802': 0,
                                              '803': 0,
                                              '804': 0,
                                              '805': 0,
                                              '806': 0,
                                              '807': 0,
                                              '808': 0,
                                              '809': 0,
                                              '810': 0,
                                              '811': 0,
                                              '812': 0,
                                              '813': 0,
                                              '814': 0,
                                              '815': 0,
                                              '816': 0,
                                              '817': 0,
                                              '818': 0,
                                              '819': 0,
                                              '820': 0,
                                              '821': 0,
                                              '822': 0,
                                              '823': 0,
                                              '824': 0,
                                              '825': 0,
                                              '826': 0,
                                              '827': 0,
                                              '828': 0,
                                              '829': 0,
                                              '830': 0,
                                              '831': 0,
                                              '832': 0,
                                              '833': 0,
                                              '834': 0,
                                              '835': 0,
                                              '836': 0,
                                              '837': 0,
                                              '838': 0,
                                              '839': 0,
                                              '840': 0,
                                              '841': 0,
                                              '842': 0,
                                              '843': 0,
                                              '844': 0,
                                              '845': 0,
                                              '846': 0,
                                              '847': 0,
                                              '848': 0,
                                              '849': 0,
                                              '850': 0,
                                              '851': 0,
                                              '852': 0,
                                              '853': 0,
                                              '854': 0,
                                              '855': 0,
                                              '856': 0,
                                              '857': 0,
                                              '858': 0,
                                              '859': 0,
                                              '860': 0,
                                              '861': 0,
                                              '862': 0,
                                              '863': 0,
                                              '864': 0,
                                              '865': 0,
                                              '866': 0,
                                              '867': 0,
                                              '868': 0,
                                              '869': 0,
                                              '870': 0,
                                              '871': 0,
                                              '872': 0,
                                              '873': 0,
                                              '874': 0,
                                              '875': 0,
                                              '876': 0,
                                              '877': 0,
                                              '878': 0,
                                              '879': 0,
                                              '880': 0,
                                              '881': 0,
                                              '882': 0,
                                              '883': 0,
                                              '884': 0,
                                              '885': 0,
                                              '886': 0,
                                              '887': 0,
                                              '888': 0,
                                              '889': 0,
                                              '890': 0,
                                              '891': 0,
                                              '892': 0,
                                              '893': 0,
                                              '894': 0,
                                              '895': 0,
                                              '896': 0,
                                              '897': 0,
                                              '898': 0,
                                              '899': 0,
                                              '900': 0,
                                              '901': 0,
                                              '902': 0,
                                              '903': 0,
                                              '904': 0,
                                              '905': 0,
                                              '906': 0,
                                              '907': 0,
                                              '908': 0,
                                              '909': 0,
                                              '910': 0,
                                              '911': 0,
                                              '912': 0,
                                              '913': 0,
                                              '914': 0,
                                              '915': 0,
                                              '916': 0,
                                              '917': 0,
                                              '918': 0,
                                              '919': 0,
                                              '920': 0,
                                              '921': 0,
                                              '922': 0,
                                              '923': 0,
                                              '924': 0,
                                              '925': 0,
                                              '926': 0,
                                              '927': 0,
                                              '928': 0,
                                              '929': 0,
                                              '930': 0,
                                              '931': 0,
                                              '932': 0,
                                              '933': 0,
                                              '934': 0,
                                              '935': 0,
                                              '936': 0,
                                              '937': 0,
                                              '938': 0,
                                              '939': 0,
                                              '940': 0,
                                              '941': 0,
                                              '942': 0,
                                              '943': 0,
                                              '944': 0,
                                              '945': 0,
                                              '946': 0,
                                              '947': 0,
                                              '948': 0,
                                              '949': 0,
                                              '950': 0,
                                              '951': 0,
                                              '952': 0,
                                              '953': 0,
                                              '954': 0,
                                              '955': 0,
                                              '956': 0,
                                              '957': 0,
                                              '958': 0,
                                              '959': 0,
                                              '960': 0,
                                              '961': 0,
                                              '962': 0,
                                              '963': 0,
                                              '964': 0,
                                              '965': 0,
                                              '966': 0,
                                              '967': 0,
                                              '968': 0,
                                              '969': 0,
                                              '970': 0,
                                              '971': 0,
                                              '972': 0,
                                              '973': 0,
                                              '974': 0,
                                              '975': 0,
                                              '976': 0,
                                              '977': 0,
                                              '978': 0,
                                              '979': 0,
                                              '980': 0,
                                              '981': 0,
                                              '982': 0,
                                              '983': 0,
                                              '984': 0,
                                              '985': 0,
                                              '986': 0,
                                              '987': 0,
                                              '988': 0,
                                              '989': 0,
                                              '990': 0,
                                              '991': 0,
                                              '992': 0,
                                              '993': 0,
                                              '994': 0,
                                              '995': 0,
                                              '996': 0,
                                              '997': 0,
                                              '998': 0,
                                              '999': 0,
                                              '1000': 0,
                                              '1001': 0,
                                              '1002': 0,
                                              '1003': 0,
                                              '1004': 0,
                                              '1005': 0,
                                              '1006': 0,
                                              '1007': 0,
                                              '1008': 0,
                                              '1009': 0,
                                              '1010': 0,
                                              '1011': 0,
                                              '1012': 0,
                                              '1013': 0,
                                              '1014': 0,
                                              '1015': 0,
                                              '1016': 0,
                                              '1017': 0,
                                              '1018': 0,
                                              '1019': 0,
                                              '1020': 0,
                                              '1021': 0,
                                              '1022': 0,
                                              '1023': 0,
                                              '1024': 0,
                                              '1025': 0,
                                              '1026': 0,
                                              '1027': 0,
                                              '1028': 0 },
                                           offset: 5,
                                           headerPosition: 0,
                                           lastEnd: 0 },
                                        ssl: false,
                                        _ending: true,
                                        _mode: 0,
                                        _emitMessage: false,
                                        _reader: 
                                         { offset: 90,
                                           lastChunk: false,
                                           chunk: 
                                            { '0': 84,
                                              '1': 0,
                                              '2': 0,
                                              '3': 0,
                                              '4': 29,
                                              '5': 0,
                                              '6': 1,
                                              '7': 110,
                                              '8': 97,
                                              '9': 109,
                                              '10': 101,
                                              '11': 0,
                                              '12': 0,
                                              '13': 0,
                                              '14': 64,
                                              '15': 22,
                                              '16': 0,
                                              '17': 1,
                                              '18': 0,
                                              '19': 0,
                                              '20': 4,
                                              '21': 19,
                                              '22': 255,
                                              '23': 255,
                                              '24': 0,
                                              '25': 0,
                                              '26': 1,
                                              '27': 3,
                                              '28': 0,
                                              '29': 0,
                                              '30': 68,
                                              '31': 0,
                                              '32': 0,
                                              '33': 0,
                                              '34': 39,
                                              '35': 0,
                                              '36': 1,
                                              '37': 0,
                                              '38': 0,
                                              '39': 0,
                                              '40': 29,
                                              '41': 50,
                                              '42': 48,
                                              '43': 49,
                                              '44': 56,
                                              '45': 48,
                                              '46': 54,
                                              '47': 48,
                                              '48': 56,
                                              '49': 49,
                                              '50': 55,
                                              '51': 51,
                                              '52': 53,
                                              '53': 49,
                                              '54': 54,
                                              '55': 45,
                                              '56': 99,
                                              '57': 114,
                                              '58': 101,
                                              '59': 97,
                                              '60': 116,
                                              '61': 101,
                                              '62': 45,
                                              '63': 117,
                                              '64': 115,
                                              '65': 101,
                                              '66': 114,
                                              '67': 46,
                                              '68': 106,
                                              '69': 115,
                                              '70': 67,
                                              '71': 0,
                                              '72': 0,
                                              '73': 0,
                                              '74': 13,
                                              '75': 83,
                                              '76': 69,
                                              '77': 76,
                                              '78': 69,
                                              '79': 67,
                                              '80': 84,
                                              '81': 32,
                                              '82': 49,
                                              '83': 0,
                                              '84': 90,
                                              '85': 0,
                                              '86': 0,
                                              '87': 0,
                                              '88': 5,
                                              '89': 73 },
                                           chunkLength: 90,
                                           headerSize: 1,
                                           lengthPadding: -4,
                                           header: 90 } },
                                     queryQueue: [],
                                     binary: false,
                                     processID: 27807,
                                     secretKey: 1143563734,
                                     ssl: false,
                                     activeQuery: null,
                                     readyForQuery: true,
                                     hasExecuted: true },
                                  state: 'INVALID' } },
                            _done: false },
                         _evictor: {},
                         _scheduledEviction: 
                          { _called: false,
                            _idleTimeout: 10000,
                            _idlePrev: 
                             { _idleNext: 
                                { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]["dialect"]["connectionManager"]["pool"]["_scheduledEviction"]' },
                               _idlePrev: 
                                { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]["dialect"]["connectionManager"]["pool"]["_scheduledEviction"]' },
                               _unrefed: false,
                               msecs: 10000,
                               nextTick: false,
                               _timer: 
                                { _list: 
                                   { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]["dialect"]["connectionManager"]["pool"]["_scheduledEviction"]["_idlePrev"]' } } },
                            _idleNext: 
                             { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]["dialect"]["connectionManager"]["pool"]["_scheduledEviction"]["_idlePrev"]' },
                            _idleStart: 20577,
                            _onTimeout: [Function],
                            _timerArgs: undefined,
                            _repeat: null,
                            _destroyed: false } },
                      lib: 
                       { defaults: 
                          { host: 'localhost',
                            user: 'ecarzoglio',
                            database: 'ecarzoglio',
                            password: null,
                            connectionString: undefined,
                            port: 5432,
                            rows: 0,
                            binary: false,
                            max: 10,
                            idleTimeoutMillis: 30000,
                            client_encoding: '',
                            ssl: false,
                            application_name: undefined,
                            fallback_application_name: undefined,
                            parseInputDatesAsUTC: false,
                            statement_timeout: false,
                            parseInt8: undefined },
                         Client: 
                          { [Function: Client]
                            super_: 
                             { [Function: EventEmitter]
                               EventEmitter: [Circular],
                               usingDomains: false,
                               defaultMaxListeners: [Getter/Setter],
                               init: [Function],
                               listenerCount: [Function] },
                            Query: 
                             { [Function: Query]
                               super_: 
                                { [Function: EventEmitter]
                                  EventEmitter: [Circular],
                                  usingDomains: false,
                                  defaultMaxListeners: [Getter/Setter],
                                  init: [Function],
                                  listenerCount: [Function] } } },
                         Query: 
                          { [Function: Query]
                            super_: 
                             { [Function: EventEmitter]
                               EventEmitter: [Circular],
                               usingDomains: false,
                               defaultMaxListeners: [Getter/Setter],
                               init: [Function],
                               listenerCount: [Function] } },
                         Pool: { [Function: BoundPool] super_: [Function: Pool] },
                         _pools: [],
                         Connection: 
                          { [Function: Connection]
                            super_: 
                             { [Function: EventEmitter]
                               EventEmitter: [Circular],
                               usingDomains: false,
                               defaultMaxListeners: [Getter/Setter],
                               init: [Function],
                               listenerCount: [Function] } },
                         types: 
                          { getTypeParser: [Function: getTypeParser],
                            setTypeParser: [Function: setTypeParser],
                            arrayParser: { create: [Function: create] } },
                         native: 
                          { defaults: 
                             { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]["dialect"]["connectionManager"]["lib"]["defaults"]' },
                            Client: 
                             { [Function]
                               Query: 
                                { [Function]
                                  super_: 
                                   { [Function: EventEmitter]
                                     EventEmitter: [Circular],
                                     usingDomains: false,
                                     defaultMaxListeners: [Getter/Setter],
                                     init: [Function],
                                     listenerCount: [Function] } },
                               super_: 
                                { [Function: EventEmitter]
                                  EventEmitter: [Circular],
                                  usingDomains: false,
                                  defaultMaxListeners: [Getter/Setter],
                                  init: [Function],
                                  listenerCount: [Function] } },
                            Query: 
                             { [Function]
                               super_: 
                                { [Function: EventEmitter]
                                  EventEmitter: [Circular],
                                  usingDomains: false,
                                  defaultMaxListeners: [Getter/Setter],
                                  init: [Function],
                                  listenerCount: [Function] } },
                            Pool: { [Function: BoundPool] super_: [Function: Pool] },
                            _pools: [],
                            Connection: 
                             { [Function: Connection]
                               super_: 
                                { [Function: EventEmitter]
                                  EventEmitter: [Circular],
                                  usingDomains: false,
                                  defaultMaxListeners: [Getter/Setter],
                                  init: [Function],
                                  listenerCount: [Function] } },
                            types: 
                             { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]["dialect"]["connectionManager"]["lib"]["types"]' } } },
                      oidMap: 
                       { '16': [Function],
                         '23': [Function],
                         '1082': [Function],
                         '1700': [Function],
                         '3904': [Function],
                         '3906': [Function],
                         '3908': [Function],
                         '3910': [Function],
                         '3912': [Function],
                         '3926': [Function] },
                      arrayOidMap: 
                       { '1000': [Function],
                         '1007': [Function],
                         '1182': [Function],
                         '1231': [Function],
                         '3905': [Function],
                         '3907': [Function],
                         '3909': [Function],
                         '3911': [Function],
                         '3913': [Function],
                         '3927': [Function] } },
                   QueryGenerator: 
                    { options: 
                       { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]["options"]' },
                      dialect: 'postgres',
                      setSearchPath: [Function: setSearchPath],
                      createSchema: [Function: createSchema],
                      dropSchema: [Function: dropSchema],
                      showSchemasQuery: [Function: showSchemasQuery],
                      versionQuery: [Function: versionQuery],
                      createTableQuery: [Function: createTableQuery],
                      dropTableQuery: [Function: dropTableQuery],
                      showTablesQuery: [Function: showTablesQuery],
                      describeTableQuery: [Function: describeTableQuery],
                      _checkValidJsonStatement: [Function: _checkValidJsonStatement],
                      jsonPathExtractionQuery: [Function: jsonPathExtractionQuery],
                      handleSequelizeMethod: [Function: handleSequelizeMethod],
                      addColumnQuery: [Function: addColumnQuery],
                      removeColumnQuery: [Function: removeColumnQuery],
                      changeColumnQuery: [Function: changeColumnQuery],
                      renameColumnQuery: [Function: renameColumnQuery],
                      fn: [Function: fn],
                      exceptionFn: [Function: exceptionFn],
                      upsertQuery: [Function: upsertQuery],
                      deleteQuery: [Function: deleteQuery],
                      showIndexesQuery: [Function: showIndexesQuery],
                      showConstraintsQuery: [Function: showConstraintsQuery],
                      removeIndexQuery: [Function: removeIndexQuery],
                      addLimitAndOffset: [Function: addLimitAndOffset],
                      attributeToSQL: [Function: attributeToSQL],
                      deferConstraintsQuery: [Function: deferConstraintsQuery],
                      setConstraintQuery: [Function: setConstraintQuery],
                      setDeferredQuery: [Function: setDeferredQuery],
                      setImmediateQuery: [Function: setImmediateQuery],
                      attributesToSQL: [Function: attributesToSQL],
                      createTrigger: [Function: createTrigger],
                      dropTrigger: [Function: dropTrigger],
                      renameTrigger: [Function: renameTrigger],
                      createFunction: [Function: createFunction],
                      dropFunction: [Function: dropFunction],
                      renameFunction: [Function: renameFunction],
                      databaseConnectionUri: [Function: databaseConnectionUri],
                      pgEscapeAndQuote: [Function: pgEscapeAndQuote],
                      expandFunctionParamList: [Function: expandFunctionParamList],
                      expandOptions: [Function: expandOptions],
                      decodeTriggerEventType: [Function: decodeTriggerEventType],
                      triggerEventTypeIsConstraint: [Function: triggerEventTypeIsConstraint],
                      expandTriggerEventSpec: [Function: expandTriggerEventSpec],
                      pgEnumName: [Function: pgEnumName],
                      pgListEnums: [Function: pgListEnums],
                      pgEnum: [Function: pgEnum],
                      pgEnumAdd: [Function: pgEnumAdd],
                      pgEnumDrop: [Function: pgEnumDrop],
                      fromArray: [Function: fromArray],
                      padInt: [Function: padInt],
                      dataTypeMapping: [Function: dataTypeMapping],
                      quoteIdentifier: [Function: quoteIdentifier],
                      getForeignKeysQuery: [Function: getForeignKeysQuery],
                      _getForeignKeyReferencesQueryPrefix: [Function: _getForeignKeyReferencesQueryPrefix],
                      getForeignKeyReferencesQuery: [Function: getForeignKeyReferencesQuery],
                      getForeignKeyReferenceQuery: [Function: getForeignKeyReferenceQuery],
                      dropForeignKeyQuery: [Function: dropForeignKeyQuery],
                      setAutocommitQuery: [Function: setAutocommitQuery],
                      _templateSettings: 
                       { escape: /<%-([\s\S]+?)%>/g,
                         evaluate: /<%([\s\S]+?)%>/g,
                         interpolate: /<%=([\s\S]+?)%>/g,
                         variable: '',
                         imports: 
                          { _: 
                             { [Function: lodash]
                               templateSettings: 
                                { escape: /<%-([\s\S]+?)%>/g,
                                  evaluate: /<%([\s\S]+?)%>/g,
                                  interpolate: /<%=([\s\S]+?)%>/g,
                                  variable: '',
                                  imports: { _: [Circular] } },
                               after: [Function: after],
                               ary: [Function: ary],
                               assign: [Function],
                               assignIn: [Function],
                               assignInWith: [Function],
                               assignWith: [Function],
                               at: [Function],
                               before: [Function: before],
                               bind: { [Function] placeholder: [Circular] },
                               bindAll: [Function],
                               bindKey: { [Function] placeholder: [Circular] },
                               castArray: [Function: castArray],
                               chain: [Function: chain],
                               chunk: [Function: chunk],
                               compact: [Function: compact],
                               concat: [Function: concat],
                               cond: [Function: cond],
                               conforms: [Function: conforms],
                               constant: [Function: constant],
                               countBy: [Function],
                               create: [Function: create],
                               curry: { [Function: curry] placeholder: [Circular] },
                               curryRight: { [Function: curryRight] placeholder: [Circular] },
                               debounce: [Function: debounce],
                               defaults: [Function],
                               defaultsDeep: [Function],
                               defer: [Function],
                               delay: [Function],
                               difference: [Function],
                               differenceBy: [Function],
                               differenceWith: [Function],
                               drop: [Function: drop],
                               dropRight: [Function: dropRight],
                               dropRightWhile: [Function: dropRightWhile],
                               dropWhile: [Function: dropWhile],
                               fill: [Function: fill],
                               filter: [Function: filter],
                               flatMap: [Function: flatMap],
                               flatMapDeep: [Function: flatMapDeep],
                               flatMapDepth: [Function: flatMapDepth],
                               flatten: [Function: flatten],
                               flattenDeep: [Function: flattenDeep],
                               flattenDepth: [Function: flattenDepth],
                               flip: [Function: flip],
                               flow: [Function],
                               flowRight: [Function],
                               fromPairs: [Function: fromPairs],
                               functions: [Function: functions],
                               functionsIn: [Function: functionsIn],
                               groupBy: [Function],
                               initial: [Function: initial],
                               intersection: [Function],
                               intersectionBy: [Function],
                               intersectionWith: [Function],
                               invert: [Function],
                               invertBy: [Function],
                               invokeMap: [Function],
                               iteratee: [Function: iteratee],
                               keyBy: [Function],
                               keys: [Function: keys],
                               keysIn: [Function: keysIn],
                               map: [Function: map],
                               mapKeys: [Function: mapKeys],
                               mapValues: [Function: mapValues],
                               matches: [Function: matches],
                               matchesProperty: [Function: matchesProperty],
                               memoize: { [Function: memoize] Cache: [Function: MapCache] },
                               merge: [Function],
                               mergeWith: [Function],
                               method: [Function],
                               methodOf: [Function],
                               mixin: [Function: mixin],
                               negate: [Function: negate],
                               nthArg: [Function: nthArg],
                               omit: [Function],
                               omitBy: [Function: omitBy],
                               once: [Function: once],
                               orderBy: [Function: orderBy],
                               over: [Function],
                               overArgs: [Function],
                               overEvery: [Function],
                               overSome: [Function],
                               partial: { [Function] placeholder: [Circular] },
                               partialRight: { [Function] placeholder: [Circular] },
                               partition: [Function],
                               pick: [Function],
                               pickBy: [Function: pickBy],
                               property: [Function: property],
                               propertyOf: [Function: propertyOf],
                               pull: [Function],
                               pullAll: [Function: pullAll],
                               pullAllBy: [Function: pullAllBy],
                               pullAllWith: [Function: pullAllWith],
                               pullAt: [Function],
                               range: [Function],
                               rangeRight: [Function],
                               rearg: [Function],
                               reject: [Function: reject],
                               remove: [Function: remove],
                               rest: [Function: rest],
                               reverse: [Function: reverse],
                               sampleSize: [Function: sampleSize],
                               set: [Function: set],
                               setWith: [Function: setWith],
                               shuffle: [Function: shuffle],
                               slice: [Function: slice],
                               sortBy: [Function],
                               sortedUniq: [Function: sortedUniq],
                               sortedUniqBy: [Function: sortedUniqBy],
                               split: [Function: split],
                               spread: [Function: spread],
                               tail: [Function: tail],
                               take: [Function: take],
                               takeRight: [Function: takeRight],
                               takeRightWhile: [Function: takeRightWhile],
                               takeWhile: [Function: takeWhile],
                               tap: [Function: tap],
                               throttle: [Function: throttle],
                               thru: [Function: thru],
                               toArray: [Function: toArray],
                               toPairs: [Function],
                               toPairsIn: [Function],
                               toPath: [Function: toPath],
                               toPlainObject: [Function: toPlainObject],
                               transform: [Function: transform],
                               unary: [Function: unary],
                               union: [Function],
                               unionBy: [Function],
                               unionWith: [Function],
                               uniq: [Function: uniq],
                               uniqBy: [Function: uniqBy],
                               uniqWith: [Function: uniqWith],
                               unset: [Function: unset],
                               unzip: [Function: unzip],
                               unzipWith: [Function: unzipWith],
                               update: [Function: update],
                               updateWith: [Function: updateWith],
                               values: [Function: values],
                               valuesIn: [Function: valuesIn],
                               without: [Function],
                               words: [Function: words],
                               wrap: [Function: wrap],
                               xor: [Function],
                               xorBy: [Function],
                               xorWith: [Function],
                               zip: [Function],
                               zipObject: [Function: zipObject],
                               zipObjectDeep: [Function: zipObjectDeep],
                               zipWith: [Function],
                               entries: [Function],
                               entriesIn: [Function],
                               extend: [Function],
                               extendWith: [Function],
                               add: [Function],
                               attempt: [Function],
                               camelCase: [Function],
                               capitalize: [Function: capitalize],
                               ceil: [Function],
                               clamp: [Function: clamp],
                               clone: [Function: clone],
                               cloneDeep: [Function: cloneDeep],
                               cloneDeepWith: [Function: cloneDeepWith],
                               cloneWith: [Function: cloneWith],
                               conformsTo: [Function: conformsTo],
                               deburr: [Function: deburr],
                               defaultTo: [Function: defaultTo],
                               divide: [Function],
                               endsWith: [Function: endsWith],
                               eq: [Function: eq],
                               escape: [Function: escape],
                               escapeRegExp: [Function: escapeRegExp],
                               every: [Function: every],
                               find: [Function],
                               findIndex: [Function: findIndex],
                               findKey: [Function: findKey],
                               findLast: [Function],
                               findLastIndex: [Function: findLastIndex],
                               findLastKey: [Function: findLastKey],
                               floor: [Function],
                               forEach: [Function: forEach],
                               forEachRight: [Function: forEachRight],
                               forIn: [Function: forIn],
                               forInRight: [Function: forInRight],
                               forOwn: [Function: forOwn],
                               forOwnRight: [Function: forOwnRight],
                               get: [Function: get],
                               gt: [Function],
                               gte: [Function],
                               has: [Function: has],
                               hasIn: [Function: hasIn],
                               head: [Function: head],
                               identity: [Function: identity],
                               includes: [Function: includes],
                               indexOf: [Function: indexOf],
                               inRange: [Function: inRange],
                               invoke: [Function],
                               isArguments: [Function: baseIsArguments],
                               isArray: [Function: isArray],
                               isArrayBuffer: [Function],
                               isArrayLike: [Function: isArrayLike],
                               isArrayLikeObject: [Function: isArrayLikeObject],
                               isBoolean: [Function: isBoolean],
                               isBuffer: [Function: isBuffer],
                               isDate: [Function],
                               isElement: [Function: isElement],
                               isEmpty: [Function: isEmpty],
                               isEqual: [Function: isEqual],
                               isEqualWith: [Function: isEqualWith],
                               isError: [Function: isError],
                               isFinite: [Function: isFinite],
                               isFunction: [Function: isFunction],
                               isInteger: [Function: isInteger],
                               isLength: [Function: isLength],
                               isMap: [Function],
                               isMatch: [Function: isMatch],
                               isMatchWith: [Function: isMatchWith],
                               isNaN: [Function: isNaN],
                               isNative: [Function: isNative],
                               isNil: [Function: isNil],
                               isNull: [Function: isNull],
                               isNumber: [Function: isNumber],
                               isObject: [Function: isObject],
                               isObjectLike: [Function: isObjectLike],
                               isPlainObject: [Function: isPlainObject],
                               isRegExp: [Function],
                               isSafeInteger: [Function: isSafeInteger],
                               isSet: [Function],
                               isString: [Function: isString],
                               isSymbol: [Function: isSymbol],
                               isTypedArray: [Function],
                               isUndefined: [Function: isUndefined],
                               isWeakMap: [Function: isWeakMap],
                               isWeakSet: [Function: isWeakSet],
                               join: [Function: join],
                               kebabCase: [Function],
                               last: [Function: last],
                               lastIndexOf: [Function: lastIndexOf],
                               lowerCase: [Function],
                               lowerFirst: [Function],
                               lt: [Function],
                               lte: [Function],
                               max: [Function: max],
                               maxBy: [Function: maxBy],
                               mean: [Function: mean],
                               meanBy: [Function: meanBy],
                               min: [Function: min],
                               minBy: [Function: minBy],
                               stubArray: [Function: stubArray],
                               stubFalse: [Function: stubFalse],
                               stubObject: [Function: stubObject],
                               stubString: [Function: stubString],
                               stubTrue: [Function: stubTrue],
                               multiply: [Function],
                               nth: [Function: nth],
                               noConflict: [Function: noConflict],
                               noop: [Function: noop],
                               now: [Function],
                               pad: [Function: pad],
                               padEnd: [Function: padEnd],
                               padStart: [Function: padStart],
                               parseInt: [Function: parseInt],
                               random: [Function: random],
                               reduce: [Function: reduce],
                               reduceRight: [Function: reduceRight],
                               repeat: [Function: repeat],
                               replace: [Function: replace],
                               result: [Function: result],
                               round: [Function],
                               runInContext: [Function: runInContext],
                               sample: [Function: sample],
                               size: [Function: size],
                               snakeCase: [Function],
                               some: [Function: some],
                               sortedIndex: [Function: sortedIndex],
                               sortedIndexBy: [Function: sortedIndexBy],
                               sortedIndexOf: [Function: sortedIndexOf],
                               sortedLastIndex: [Function: sortedLastIndex],
                               sortedLastIndexBy: [Function: sortedLastIndexBy],
                               sortedLastIndexOf: [Function: sortedLastIndexOf],
                               startCase: [Function],
                               startsWith: [Function: startsWith],
                               subtract: [Function],
                               sum: [Function: sum],
                               sumBy: [Function: sumBy],
                               template: [Function: template],
                               times: [Function: times],
                               toFinite: [Function: toFinite],
                               toInteger: [Function: toInteger],
                               toLength: [Function: toLength],
                               toLower: [Function: toLower],
                               toNumber: [Function: toNumber],
                               toSafeInteger: [Function: toSafeInteger],
                               toString: [Function: toString],
                               toUpper: [Function: toUpper],
                               trim: [Function: trim],
                               trimEnd: [Function: trimEnd],
                               trimStart: [Function: trimStart],
                               truncate: [Function: truncate],
                               unescape: [Function: unescape],
                               uniqueId: [Function: uniqueId],
                               upperCase: [Function],
                               upperFirst: [Function],
                               each: [Function: forEach],
                               eachRight: [Function: forEachRight],
                               first: [Function: head],
                               VERSION: '4.17.10' } } },
                      extractTableDetails: [Function: extractTableDetails],
                      addSchema: [Function: addSchema],
                      renameTableQuery: [Function: renameTableQuery],
                      insertQuery: [Function: insertQuery],
                      bulkInsertQuery: [Function: bulkInsertQuery],
                      updateQuery: [Function: updateQuery],
                      arithmeticQuery: [Function: arithmeticQuery],
                      nameIndexes: [Function: nameIndexes],
                      addIndexQuery: [Function: addIndexQuery],
                      addConstraintQuery: [Function: addConstraintQuery],
                      getConstraintSnippet: [Function: getConstraintSnippet],
                      removeConstraintQuery: [Function: removeConstraintQuery],
                      quoteTable: [Function: quoteTable],
                      quote: [Function: quote],
                      quoteIdentifiers: [Function: quoteIdentifiers],
                      escape: [Function: escape],
                      selectQuery: [Function: selectQuery],
                      escapeAttributes: [Function: escapeAttributes],
                      generateInclude: [Function: generateInclude],
                      generateJoin: [Function: generateJoin],
                      generateThroughJoin: [Function: generateThroughJoin],
                      _generateSubQueryFilter: [Function: _generateSubQueryFilter],
                      _getRequiredClosure: [Function: _getRequiredClosure],
                      getQueryOrders: [Function: getQueryOrders],
                      selectFromTableFragment: [Function: selectFromTableFragment],
                      setIsolationLevelQuery: [Function: setIsolationLevelQuery],
                      generateTransactionId: [Function: generateTransactionId],
                      startTransactionQuery: [Function: startTransactionQuery],
                      commitTransactionQuery: [Function: commitTransactionQuery],
                      rollbackTransactionQuery: [Function: rollbackTransactionQuery],
                      whereQuery: [Function: whereQuery],
                      whereItemsQuery: [Function: whereItemsQuery],
                      OperatorMap: {},
                      OperatorsAliasMap: 
                       { ne: Symbol(ne),
                         not: Symbol(not),
                         in: Symbol(in),
                         notIn: Symbol(notIn),
                         gte: Symbol(gte),
                         gt: Symbol(gt),
                         lte: Symbol(lte),
                         lt: Symbol(lt),
                         like: Symbol(like),
                         ilike: Symbol(iLike),
                         '$ilike': Symbol(iLike),
                         nlike: Symbol(notLike),
                         '$notlike': Symbol(notLike),
                         notilike: Symbol(notILike),
                         '..': Symbol(between),
                         between: Symbol(between),
                         '!..': Symbol(notBetween),
                         notbetween: Symbol(notBetween),
                         nbetween: Symbol(notBetween),
                         overlap: Symbol(overlap),
                         '&&': Symbol(overlap),
                         '@>': Symbol(contains),
                         '<@': Symbol(contained),
                         '$eq': Symbol(eq),
                         '$ne': Symbol(ne),
                         '$gte': Symbol(gte),
                         '$gt': Symbol(gt),
                         '$lte': Symbol(lte),
                         '$lt': Symbol(lt),
                         '$not': Symbol(not),
                         '$in': Symbol(in),
                         '$notIn': Symbol(notIn),
                         '$is': Symbol(is),
                         '$like': Symbol(like),
                         '$notLike': Symbol(notLike),
                         '$iLike': Symbol(iLike),
                         '$notILike': Symbol(notILike),
                         '$regexp': Symbol(regexp),
                         '$notRegexp': Symbol(notRegexp),
                         '$iRegexp': Symbol(iRegexp),
                         '$notIRegexp': Symbol(notIRegexp),
                         '$between': Symbol(between),
                         '$notBetween': Symbol(notBetween),
                         '$overlap': Symbol(overlap),
                         '$contains': Symbol(contains),
                         '$contained': Symbol(contained),
                         '$adjacent': Symbol(adjacent),
                         '$strictLeft': Symbol(strictLeft),
                         '$strictRight': Symbol(strictRight),
                         '$noExtendRight': Symbol(noExtendRight),
                         '$noExtendLeft': Symbol(noExtendLeft),
                         '$and': Symbol(and),
                         '$or': Symbol(or),
                         '$any': Symbol(any),
                         '$all': Symbol(all),
                         '$values': Symbol(values),
                         '$col': Symbol(col),
                         '$raw': Symbol(raw) },
                      setOperatorsAliases: [Function: setOperatorsAliases],
                      whereItemQuery: [Function: whereItemQuery],
                      _findField: [Function: _findField],
                      _replaceAliases: [Function: _replaceAliases],
                      _whereGroupBind: [Function: _whereGroupBind],
                      _whereBind: [Function: _whereBind],
                      _whereJSON: [Function: _whereJSON],
                      _traverseJSON: [Function: _traverseJSON],
                      _toJSONValue: [Function: _toJSONValue],
                      _castKey: [Function: _castKey],
                      _getJsonCast: [Function: _getJsonCast],
                      _joinKeyValue: [Function: _joinKeyValue],
                      _getSafeKey: [Function: _getSafeKey],
                      _prefixKey: [Function: _prefixKey],
                      _whereParseSingleValueObject: [Function: _whereParseSingleValueObject],
                      getWhereConditions: [Function: getWhereConditions],
                      parseConditionObject: [Function: parseConditionObject],
                      isIdentifierQuoted: [Function: isIdentifierQuoted],
                      booleanValue: [Function: booleanValue],
                      _dialect: 
                       { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]["dialect"]' },
                      sequelize: 
                       { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]' },
                      typeValidation: undefined } },
                queryInterface: 
                 { sequelize: 
                    { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]' },
                   QueryGenerator: 
                    { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]["dialect"]["QueryGenerator"]' } },
                models: { User: User, SequelizeMeta: SequelizeMeta },
                modelManager: 
                 { models: [ User, SequelizeMeta ],
                   sequelize: 
                    { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]' } },
                connectionManager: 
                 { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]["dialect"]["connectionManager"]' },
                importCache: 
                 { '/home/ecarzoglio/Documents/node-ex/app/models/user.js': User },
                test: 
                 { _trackRunningQueries: false,
                   _runningQueries: 0,
                   trackRunningQueries: [Function: trackRunningQueries],
                   verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
             hooks: {},
             uniqueKeys: 
              { Users_email_unique: 
                 { fields: [ 'email' ],
                   msg: null,
                   name: 'Users_email_unique',
                   column: 'email',
                   customIndex: false } } },
          _options: 
           { isNewRecord: true,
             _schema: null,
             _schemaDelimiter: '',
             attributes: undefined,
             include: undefined,
             raw: undefined,
             silent: undefined },
          __eagerlyLoadedAssociations: [],
          isNewRecord: true },
       validatorKey: 'is_null',
       validatorName: null,
       validatorArgs: [] },
     { message: 'User.lastName cannot be null',
       type: 'notNull Violation',
       path: 'lastName',
       value: null,
       origin: 'CORE',
       instance: { '$ref': '$["message"][0]["instance"]' },
       validatorKey: 'is_null',
       validatorName: null,
       validatorArgs: [] },
     { message: 'User.email cannot be null',
       type: 'notNull Violation',
       path: 'email',
       value: null,
       origin: 'CORE',
       instance: { '$ref': '$["message"][0]["instance"]' },
       validatorKey: 'is_null',
       validatorName: null,
       validatorArgs: [] },
     { message: 'User.password cannot be null',
       type: 'notNull Violation',
       path: 'password',
       value: null,
       origin: 'CORE',
       instance: { '$ref': '$["message"][0]["instance"]' },
       validatorKey: 'is_null',
       validatorName: null,
       validatorArgs: [] } ],
  internalCode: 'saving_error' }
09:37:09 - info: Listening on port: 8080
09:37:11 - error:  
{ message: 
   [ { message: 'User.firstName cannot be null',
       type: 'notNull Violation',
       path: 'firstName',
       value: null,
       origin: 'CORE',
       instance: 
        { dataValues: 
           { id: null,
             updatedAt: 2018-06-12T12:37:11.361Z,
             createdAt: 2018-06-12T12:37:11.361Z },
          _previousDataValues: {},
          _changed: {},
          _modelOptions: 
           { timestamps: true,
             validate: {},
             freezeTableName: false,
             underscored: false,
             underscoredAll: false,
             paranoid: false,
             rejectOnEmpty: false,
             whereCollection: null,
             schema: null,
             schemaDelimiter: '',
             defaultScope: {},
             scopes: [],
             indexes: [],
             name: { plural: 'Users', singular: 'User' },
             omitNull: false,
             sequelize: 
              { options: 
                 { dialect: 'postgres',
                   dialectModulePath: null,
                   host: 'localhost',
                   protocol: 'tcp',
                   define: {},
                   query: {},
                   sync: {},
                   timezone: '+00:00',
                   logging: [Function: bound consoleCall],
                   omitNull: false,
                   native: false,
                   replication: false,
                   ssl: undefined,
                   pool: {},
                   quoteIdentifiers: true,
                   hooks: {},
                   retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
                   transactionType: 'DEFERRED',
                   isolationLevel: null,
                   databaseVersion: '9.4.0',
                   typeValidation: false,
                   benchmark: false,
                   operatorsAliases: true,
                   username: 'ecarzoglio',
                   password: '123456',
                   database: 'nodedb' },
                config: 
                 { database: 'nodedb',
                   username: 'ecarzoglio',
                   password: '123456',
                   host: 'localhost',
                   port: 5432,
                   pool: 
                    { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]["options"]["pool"]' },
                   protocol: 'tcp',
                   native: false,
                   ssl: undefined,
                   replication: false,
                   dialectModulePath: null,
                   keepDefaultTimezone: undefined,
                   dialectOptions: undefined },
                dialect: 
                 { sequelize: 
                    { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]' },
                   connectionManager: 
                    { sequelize: 
                       { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]' },
                      config: 
                       { database: 'nodedb',
                         username: 'ecarzoglio',
                         password: '123456',
                         host: 'localhost',
                         port: undefined,
                         pool: 
                          { max: 5,
                            min: 0,
                            idle: 10000,
                            acquire: 10000,
                            evict: 10000,
                            handleDisconnects: true,
                            validate: [Function: bound _validate],
                            Promise: 
                             { [Function: Promise]
                               TypeError: [Function: TypeError],
                               RangeError: [Function: RangeError],
                               CancellationError: [Function: SubError],
                               TimeoutError: [Function: SubError],
                               OperationalError: [Function: OperationalError],
                               RejectionError: [Function: OperationalError],
                               AggregateError: [Function: SubError],
                               _peekContext: [Function],
                               onPossiblyUnhandledRejection: [Function],
                               onUnhandledRejectionHandled: [Function],
                               longStackTraces: [Function],
                               hasLongStackTraces: [Function],
                               config: [Function],
                               getNewLibraryCopy: [Function],
                               is: [Function],
                               fromCallback: [Function],
                               fromNode: [Function],
                               all: [Function],
                               cast: [Function],
                               fulfilled: [Function],
                               resolve: [Function],
                               rejected: [Function],
                               reject: [Function],
                               setScheduler: [Function],
                               pending: [Function],
                               defer: [Function],
                               method: [Function],
                               try: [Function],
                               attempt: [Function],
                               bind: [Function],
                               PromiseInspection: [Function: PromiseInspection],
                               join: [Function],
                               Promise: [Circular],
                               version: '3.5.1',
                               map: [Function],
                               using: [Function],
                               delay: [Function],
                               coroutine: { [Function] addYieldHandler: [Function] },
                               spawn: [Function],
                               promisify: [Function],
                               promisifyAll: [Function],
                               props: [Function],
                               race: [Function],
                               reduce: [Function],
                               settle: [Function],
                               some: [Function],
                               _SomePromiseArray: [Function: SomePromiseArray],
                               filter: [Function],
                               each: [Function],
                               mapSeries: [Function: PromiseMapSeries],
                               any: [Function],
                               default: [Circular] } },
                         protocol: 'tcp',
                         native: false,
                         ssl: undefined,
                         replication: false,
                         dialectModulePath: null,
                         keepDefaultTimezone: undefined,
                         dialectOptions: undefined,
                         user: 'ecarzoglio' },
                      dialect: 
                       { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]["dialect"]' },
                      versionPromise: null,
                      dialectName: 'postgres',
                      pool: 
                       { _events: {},
                         _eventsCount: 0,
                         _maxListeners: undefined,
                         _config: 
                          { fifo: true,
                            priorityRange: 1,
                            testOnBorrow: true,
                            testOnReturn: false,
                            autostart: false,
                            acquireTimeoutMillis: 10000,
                            max: 5,
                            min: 0,
                            evictionRunIntervalMillis: 10000,
                            numTestsPerEvictionRun: 3,
                            softIdleTimeoutMillis: -1,
                            idleTimeoutMillis: 10000,
                            Promise: 
                             { [Function: Promise]
                               TypeError: [Function: TypeError],
                               RangeError: [Function: RangeError],
                               CancellationError: [Function: SubError],
                               TimeoutError: [Function: SubError],
                               OperationalError: [Function: OperationalError],
                               RejectionError: [Function: OperationalError],
                               AggregateError: [Function: SubError],
                               _peekContext: [Function],
                               onPossiblyUnhandledRejection: [Function],
                               onUnhandledRejectionHandled: [Function],
                               longStackTraces: [Function],
                               hasLongStackTraces: [Function],
                               config: [Function],
                               getNewLibraryCopy: [Function],
                               is: [Function],
                               fromCallback: [Function],
                               fromNode: [Function],
                               all: [Function],
                               cast: [Function],
                               fulfilled: [Function],
                               resolve: [Function],
                               rejected: [Function],
                               reject: [Function],
                               setScheduler: [Function],
                               pending: [Function],
                               defer: [Function],
                               method: [Function],
                               try: [Function],
                               attempt: [Function],
                               bind: [Function],
                               PromiseInspection: [Function: PromiseInspection],
                               join: [Function],
                               Promise: [Circular],
                               version: '3.5.1',
                               map: [Function],
                               using: [Function],
                               delay: [Function],
                               coroutine: { [Function] addYieldHandler: [Function] },
                               spawn: [Function],
                               promisify: [Function],
                               promisifyAll: [Function],
                               props: [Function],
                               race: [Function],
                               reduce: [Function],
                               settle: [Function],
                               some: [Function],
                               _SomePromiseArray: [Function: SomePromiseArray],
                               filter: [Function],
                               each: [Function],
                               mapSeries: [Function: PromiseMapSeries],
                               any: [Function],
                               default: [Circular] } },
                         _Promise: 
                          { [Function: Promise]
                            TypeError: [Function: TypeError],
                            RangeError: [Function: RangeError],
                            CancellationError: [Function: SubError],
                            TimeoutError: [Function: SubError],
                            OperationalError: [Function: OperationalError],
                            RejectionError: [Function: OperationalError],
                            AggregateError: [Function: SubError],
                            _peekContext: [Function],
                            onPossiblyUnhandledRejection: [Function],
                            onUnhandledRejectionHandled: [Function],
                            longStackTraces: [Function],
                            hasLongStackTraces: [Function],
                            config: [Function],
                            getNewLibraryCopy: [Function],
                            is: [Function],
                            fromCallback: [Function],
                            fromNode: [Function],
                            all: [Function],
                            cast: [Function],
                            fulfilled: [Function],
                            resolve: [Function],
                            rejected: [Function],
                            reject: [Function],
                            setScheduler: [Function],
                            pending: [Function],
                            defer: [Function],
                            method: [Function],
                            try: [Function],
                            attempt: [Function],
                            bind: [Function],
                            PromiseInspection: [Function: PromiseInspection],
                            join: [Function],
                            Promise: [Circular],
                            version: '3.5.1',
                            map: [Function],
                            using: [Function],
                            delay: [Function],
                            coroutine: { [Function] addYieldHandler: [Function] },
                            spawn: [Function],
                            promisify: [Function],
                            promisifyAll: [Function],
                            props: [Function],
                            race: [Function],
                            reduce: [Function],
                            settle: [Function],
                            some: [Function],
                            _SomePromiseArray: [Function: SomePromiseArray],
                            filter: [Function],
                            each: [Function],
                            mapSeries: [Function: PromiseMapSeries],
                            any: [Function],
                            default: [Circular] },
                         _factory: 
                          { create: [Function: create],
                            destroy: [Function: destroy],
                            validate: [Function: bound _validate] },
                         _draining: false,
                         _started: true,
                         _waitingClientsQueue: 
                          { _size: 1,
                            _slots: [ { _list: { head: null, tail: null, length: 0 } } ] },
                         _factoryCreateOperations: {},
                         _factoryDestroyOperations: {},
                         _availableObjects: 
                          { _list: 
                             { head: 
                                { prev: null,
                                  next: null,
                                  data: 
                                   { creationTime: 1528807029563,
                                     lastReturnTime: 1528807029576,
                                     lastBorrowTime: 1528807029574,
                                     lastIdleTime: 1528807029576,
                                     obj: 
                                      { _events: { end: [Function], error: [Function] },
                                        _eventsCount: 2,
                                        _maxListeners: undefined,
                                        connectionParameters: 
                                         { user: 'ecarzoglio',
                                           database: 'nodedb',
                                           port: 5432,
                                           host: 'localhost',
                                           password: '123456',
                                           binary: false,
                                           ssl: false,
                                           client_encoding: '',
                                           replication: undefined,
                                           isDomainSocket: false,
                                           application_name: undefined,
                                           fallback_application_name: undefined,
                                           statement_timeout: false },
                                        user: 'ecarzoglio',
                                        database: 'nodedb',
                                        port: 5432,
                                        host: 'localhost',
                                        password: '123456',
                                        replication: undefined,
                                        _types: 
                                         { _types: { getTypeParser: [Function: bound getTypeParser] },
                                           text: {},
                                           binary: {} },
                                        _ending: false,
                                        _connecting: false,
                                        _connected: true,
                                        _connectionError: false,
                                        connection: 
                                         { _events: 
                                            { newListener: [Function],
                                              connect: [Function],
                                              sslconnect: [Function],
                                              authenticationCleartextPassword: [Function],
                                              authenticationMD5Password: [Function],
                                              readyForQuery: [Function],
                                              end: { [Function: bound onceWrapper] listener: [Function] },
                                              notice: [Function],
                                              rowDescription: [Function],
                                              dataRow: [Function],
                                              portalSuspended: [Function],
                                              emptyQuery: [Function],
                                              commandComplete: [Function],
                                              parseComplete: [Function],
                                              copyInResponse: [Function],
                                              copyData: [Function],
                                              notification: [Function],
                                              error: [Function: connectedErrorHandler] },
                                           _eventsCount: 18,
                                           _maxListeners: undefined,
                                           stream: 
                                            { connecting: false,
                                              _hadError: false,
                                              _handle: 
                                               { reading: true,
                                                 owner: 
                                                  { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]["dialect"]["connectionManager"]["pool"]["_availableObjects"]["_list"]["head"]["data"]["obj"]["connection"]["stream"]' },
                                                 onread: [Function: onread],
                                                 onconnection: null },
                                              _parent: null,
                                              _host: 'localhost',
                                              _readableState: 
                                               { objectMode: false,
                                                 highWaterMark: 16384,
                                                 buffer: { head: null, tail: null, length: 0 },
                                                 length: 0,
                                                 pipes: null,
                                                 pipesCount: 0,
                                                 flowing: true,
                                                 ended: false,
                                                 endEmitted: false,
                                                 reading: true,
                                                 sync: false,
                                                 needReadable: true,
                                                 emittedReadable: false,
                                                 readableListening: false,
                                                 resumeScheduled: false,
                                                 destroyed: false,
                                                 defaultEncoding: 'utf8',
                                                 awaitDrain: 0,
                                                 readingMore: false,
                                                 decoder: null,
                                                 encoding: null },
                                              readable: true,
                                              _events: 
                                               { finish: [Function: onSocketFinish],
                                                 end: [ [Function: onReadableStreamEnd], [Function] ],
                                                 connect: [Function],
                                                 error: [Function: reportStreamError],
                                                 close: [Function],
                                                 data: [Function] },
                                              _eventsCount: 6,
                                              _maxListeners: undefined,
                                              _writableState: 
                                               { objectMode: false,
                                                 highWaterMark: 16384,
                                                 finalCalled: false,
                                                 needDrain: false,
                                                 ending: false,
                                                 ended: false,
                                                 finished: false,
                                                 destroyed: false,
                                                 decodeStrings: false,
                                                 defaultEncoding: 'utf8',
                                                 length: 0,
                                                 writing: false,
                                                 corked: 0,
                                                 sync: false,
                                                 bufferProcessing: false,
                                                 onwrite: [Function: bound onwrite],
                                                 writecb: null,
                                                 writelen: 0,
                                                 bufferedRequest: null,
                                                 lastBufferedRequest: null,
                                                 pendingcb: 0,
                                                 prefinished: false,
                                                 errorEmitted: false,
                                                 bufferedRequestCount: 0,
                                                 corkedRequestsFree: 
                                                  { next: null,
                                                    entry: null,
                                                    finish: [Function: bound onCorkedFinish] } },
                                              writable: true,
                                              _bytesDispatched: 1095,
                                              _sockname: null,
                                              _pendingData: null,
                                              _pendingEncoding: '',
                                              allowHalfOpen: false,
                                              server: null,
                                              _server: null },
                                           _keepAlive: false,
                                           lastBuffer: false,
                                           lastOffset: 0,
                                           buffer: null,
                                           offset: 1,
                                           encoding: 'utf8',
                                           parsedStatements: {},
                                           writer: 
                                            { size: 1024,
                                              buffer: 
                                               { '0': 81,
                                                 '1': 0,
                                                 '2': 0,
                                                 '3': 0,
                                                 '4': 95,
                                                 '5': 83,
                                                 '6': 69,
                                                 '7': 76,
                                                 '8': 69,
                                                 '9': 67,
                                                 '10': 84,
                                                 '11': 32,
                                                 '12': 34,
                                                 '13': 110,
                                                 '14': 97,
                                                 '15': 109,
                                                 '16': 101,
                                                 '17': 34,
                                                 '18': 32,
                                                 '19': 70,
                                                 '20': 82,
                                                 '21': 79,
                                                 '22': 77,
                                                 '23': 32,
                                                 '24': 34,
                                                 '25': 83,
                                                 '26': 101,
                                                 '27': 113,
                                                 '28': 117,
                                                 '29': 101,
                                                 '30': 108,
                                                 '31': 105,
                                                 '32': 122,
                                                 '33': 101,
                                                 '34': 77,
                                                 '35': 101,
                                                 '36': 116,
                                                 '37': 97,
                                                 '38': 34,
                                                 '39': 32,
                                                 '40': 65,
                                                 '41': 83,
                                                 '42': 32,
                                                 '43': 34,
                                                 '44': 83,
                                                 '45': 101,
                                                 '46': 113,
                                                 '47': 117,
                                                 '48': 101,
                                                 '49': 108,
                                                 '50': 105,
                                                 '51': 122,
                                                 '52': 101,
                                                 '53': 77,
                                                 '54': 101,
                                                 '55': 116,
                                                 '56': 97,
                                                 '57': 34,
                                                 '58': 32,
                                                 '59': 79,
                                                 '60': 82,
                                                 '61': 68,
                                                 '62': 69,
                                                 '63': 82,
                                                 '64': 32,
                                                 '65': 66,
                                                 '66': 89,
                                                 '67': 32,
                                                 '68': 34,
                                                 '69': 83,
                                                 '70': 101,
                                                 '71': 113,
                                                 '72': 117,
                                                 '73': 101,
                                                 '74': 108,
                                                 '75': 105,
                                                 '76': 122,
                                                 '77': 101,
                                                 '78': 77,
                                                 '79': 101,
                                                 '80': 116,
                                                 '81': 97,
                                                 '82': 34,
                                                 '83': 46,
                                                 '84': 34,
                                                 '85': 110,
                                                 '86': 97,
                                                 '87': 109,
                                                 '88': 101,
                                                 '89': 34,
                                                 '90': 32,
                                                 '91': 65,
                                                 '92': 83,
                                                 '93': 67,
                                                 '94': 59,
                                                 '95': 0,
                                                 '96': 83,
                                                 '97': 32,
                                                 '98': 105,
                                                 '99': 110,
                                                 '100': 100,
                                                 '101': 107,
                                                 '102': 101,
                                                 '103': 121,
                                                 '104': 44,
                                                 '105': 32,
                                                 '106': 97,
                                                 '107': 114,
                                                 '108': 114,
                                                 '109': 97,
                                                 '110': 121,
                                                 '111': 95,
                                                 '112': 97,
                                                 '113': 103,
                                                 '114': 103,
                                                 '115': 40,
                                                 '116': 97,
                                                 '117': 46,
                                                 '118': 97,
                                                 '119': 116,
                                                 '120': 116,
                                                 '121': 110,
                                                 '122': 117,
                                                 '123': 109,
                                                 '124': 41,
                                                 '125': 32,
                                                 '126': 97,
                                                 '127': 115,
                                                 '128': 32,
                                                 '129': 99,
                                                 '130': 111,
                                                 '131': 108,
                                                 '132': 117,
                                                 '133': 109,
                                                 '134': 110,
                                                 '135': 95,
                                                 '136': 105,
                                                 '137': 110,
                                                 '138': 100,
                                                 '139': 101,
                                                 '140': 120,
                                                 '141': 101,
                                                 '142': 115,
                                                 '143': 44,
                                                 '144': 32,
                                                 '145': 97,
                                                 '146': 114,
                                                 '147': 114,
                                                 '148': 97,
                                                 '149': 121,
                                                 '150': 95,
                                                 '151': 97,
                                                 '152': 103,
                                                 '153': 103,
                                                 '154': 40,
                                                 '155': 97,
                                                 '156': 46,
                                                 '157': 97,
                                                 '158': 116,
                                                 '159': 116,
                                                 '160': 110,
                                                 '161': 97,
                                                 '162': 109,
                                                 '163': 101,
                                                 '164': 41,
                                                 '165': 32,
                                                 '166': 65,
                                                 '167': 83,
                                                 '168': 32,
                                                 '169': 99,
                                                 '170': 111,
                                                 '171': 108,
                                                 '172': 117,
                                                 '173': 109,
                                                 '174': 110,
                                                 '175': 95,
                                                 '176': 110,
                                                 '177': 97,
                                                 '178': 109,
                                                 '179': 101,
                                                 '180': 115,
                                                 '181': 44,
                                                 '182': 32,
                                                 '183': 112,
                                                 '184': 103,
                                                 '185': 95,
                                                 '186': 103,
                                                 '187': 101,
                                                 '188': 116,
                                                 '189': 95,
                                                 '190': 105,
                                                 '191': 110,
                                                 '192': 100,
                                                 '193': 101,
                                                 '194': 120,
                                                 '195': 100,
                                                 '196': 101,
                                                 '197': 102,
                                                 '198': 40,
                                                 '199': 105,
                                                 '200': 120,
                                                 '201': 46,
                                                 '202': 105,
                                                 '203': 110,
                                                 '204': 100,
                                                 '205': 101,
                                                 '206': 120,
                                                 '207': 114,
                                                 '208': 101,
                                                 '209': 108,
                                                 '210': 105,
                                                 '211': 100,
                                                 '212': 41,
                                                 '213': 32,
                                                 '214': 65,
                                                 '215': 83,
                                                 '216': 32,
                                                 '217': 100,
                                                 '218': 101,
                                                 '219': 102,
                                                 '220': 105,
                                                 '221': 110,
                                                 '222': 105,
                                                 '223': 116,
                                                 '224': 105,
                                                 '225': 111,
                                                 '226': 110,
                                                 '227': 32,
                                                 '228': 70,
                                                 '229': 82,
                                                 '230': 79,
                                                 '231': 77,
                                                 '232': 32,
                                                 '233': 112,
                                                 '234': 103,
                                                 '235': 95,
                                                 '236': 99,
                                                 '237': 108,
                                                 '238': 97,
                                                 '239': 115,
                                                 '240': 115,
                                                 '241': 32,
                                                 '242': 116,
                                                 '243': 44,
                                                 '244': 32,
                                                 '245': 112,
                                                 '246': 103,
                                                 '247': 95,
                                                 '248': 99,
                                                 '249': 108,
                                                 '250': 97,
                                                 '251': 115,
                                                 '252': 115,
                                                 '253': 32,
                                                 '254': 105,
                                                 '255': 44,
                                                 '256': 32,
                                                 '257': 112,
                                                 '258': 103,
                                                 '259': 95,
                                                 '260': 105,
                                                 '261': 110,
                                                 '262': 100,
                                                 '263': 101,
                                                 '264': 120,
                                                 '265': 32,
                                                 '266': 105,
                                                 '267': 120,
                                                 '268': 44,
                                                 '269': 32,
                                                 '270': 112,
                                                 '271': 103,
                                                 '272': 95,
                                                 '273': 97,
                                                 '274': 116,
                                                 '275': 116,
                                                 '276': 114,
                                                 '277': 105,
                                                 '278': 98,
                                                 '279': 117,
                                                 '280': 116,
                                                 '281': 101,
                                                 '282': 32,
                                                 '283': 97,
                                                 '284': 32,
                                                 '285': 87,
                                                 '286': 72,
                                                 '287': 69,
                                                 '288': 82,
                                                 '289': 69,
                                                 '290': 32,
                                                 '291': 116,
                                                 '292': 46,
                                                 '293': 111,
                                                 '294': 105,
                                                 '295': 100,
                                                 '296': 32,
                                                 '297': 61,
                                                 '298': 32,
                                                 '299': 105,
                                                 '300': 120,
                                                 '301': 46,
                                                 '302': 105,
                                                 '303': 110,
                                                 '304': 100,
                                                 '305': 114,
                                                 '306': 101,
                                                 '307': 108,
                                                 '308': 105,
                                                 '309': 100,
                                                 '310': 32,
                                                 '311': 65,
                                                 '312': 78,
                                                 '313': 68,
                                                 '314': 32,
                                                 '315': 105,
                                                 '316': 46,
                                                 '317': 111,
                                                 '318': 105,
                                                 '319': 100,
                                                 '320': 32,
                                                 '321': 61,
                                                 '322': 32,
                                                 '323': 105,
                                                 '324': 120,
                                                 '325': 46,
                                                 '326': 105,
                                                 '327': 110,
                                                 '328': 100,
                                                 '329': 101,
                                                 '330': 120,
                                                 '331': 114,
                                                 '332': 101,
                                                 '333': 108,
                                                 '334': 105,
                                                 '335': 100,
                                                 '336': 32,
                                                 '337': 65,
                                                 '338': 78,
                                                 '339': 68,
                                                 '340': 32,
                                                 '341': 97,
                                                 '342': 46,
                                                 '343': 97,
                                                 '344': 116,
                                                 '345': 116,
                                                 '346': 114,
                                                 '347': 101,
                                                 '348': 108,
                                                 '349': 105,
                                                 '350': 100,
                                                 '351': 32,
                                                 '352': 61,
                                                 '353': 32,
                                                 '354': 116,
                                                 '355': 46,
                                                 '356': 111,
                                                 '357': 105,
                                                 '358': 100,
                                                 '359': 32,
                                                 '360': 65,
                                                 '361': 78,
                                                 '362': 68,
                                                 '363': 32,
                                                 '364': 116,
                                                 '365': 46,
                                                 '366': 114,
                                                 '367': 101,
                                                 '368': 108,
                                                 '369': 107,
                                                 '370': 105,
                                                 '371': 110,
                                                 '372': 100,
                                                 '373': 32,
                                                 '374': 61,
                                                 '375': 32,
                                                 '376': 39,
                                                 '377': 114,
                                                 '378': 39,
                                                 '379': 32,
                                                 '380': 97,
                                                 '381': 110,
                                                 '382': 100,
                                                 '383': 32,
                                                 '384': 116,
                                                 '385': 46,
                                                 '386': 114,
                                                 '387': 101,
                                                 '388': 108,
                                                 '389': 110,
                                                 '390': 97,
                                                 '391': 109,
                                                 '392': 101,
                                                 '393': 32,
                                                 '394': 61,
                                                 '395': 32,
                                                 '396': 39,
                                                 '397': 83,
                                                 '398': 101,
                                                 '399': 113,
                                                 '400': 117,
                                                 '401': 101,
                                                 '402': 108,
                                                 '403': 105,
                                                 '404': 122,
                                                 '405': 101,
                                                 '406': 77,
                                                 '407': 101,
                                                 '408': 116,
                                                 '409': 97,
                                                 '410': 39,
                                                 '411': 32,
                                                 '412': 71,
                                                 '413': 82,
                                                 '414': 79,
                                                 '415': 85,
                                                 '416': 80,
                                                 '417': 32,
                                                 '418': 66,
                                                 '419': 89,
                                                 '420': 32,
                                                 '421': 105,
                                                 '422': 46,
                                                 '423': 114,
                                                 '424': 101,
                                                 '425': 108,
                                                 '426': 110,
                                                 '427': 97,
                                                 '428': 109,
                                                 '429': 101,
                                                 '430': 44,
                                                 '431': 32,
                                                 '432': 105,
                                                 '433': 120,
                                                 '434': 46,
                                                 '435': 105,
                                                 '436': 110,
                                                 '437': 100,
                                                 '438': 101,
                                                 '439': 120,
                                                 '440': 114,
                                                 '441': 101,
                                                 '442': 108,
                                                 '443': 105,
                                                 '444': 100,
                                                 '445': 44,
                                                 '446': 32,
                                                 '447': 105,
                                                 '448': 120,
                                                 '449': 46,
                                                 '450': 105,
                                                 '451': 110,
                                                 '452': 100,
                                                 '453': 105,
                                                 '454': 115,
                                                 '455': 112,
                                                 '456': 114,
                                                 '457': 105,
                                                 '458': 109,
                                                 '459': 97,
                                                 '460': 114,
                                                 '461': 121,
                                                 '462': 44,
                                                 '463': 32,
                                                 '464': 105,
                                                 '465': 120,
                                                 '466': 46,
                                                 '467': 105,
                                                 '468': 110,
                                                 '469': 100,
                                                 '470': 105,
                                                 '471': 115,
                                                 '472': 117,
                                                 '473': 110,
                                                 '474': 105,
                                                 '475': 113,
                                                 '476': 117,
                                                 '477': 101,
                                                 '478': 44,
                                                 '479': 32,
                                                 '480': 105,
                                                 '481': 120,
                                                 '482': 46,
                                                 '483': 105,
                                                 '484': 110,
                                                 '485': 100,
                                                 '486': 107,
                                                 '487': 101,
                                                 '488': 121,
                                                 '489': 32,
                                                 '490': 79,
                                                 '491': 82,
                                                 '492': 68,
                                                 '493': 69,
                                                 '494': 82,
                                                 '495': 32,
                                                 '496': 66,
                                                 '497': 89,
                                                 '498': 32,
                                                 '499': 105,
                                                 '500': 46,
                                                 '501': 114,
                                                 '502': 101,
                                                 '503': 108,
                                                 '504': 110,
                                                 '505': 97,
                                                 '506': 109,
                                                 '507': 101,
                                                 '508': 59,
                                                 '509': 0,
                                                 '510': 0,
                                                 '511': 0,
                                                 '512': 0,
                                                 '513': 0,
                                                 '514': 0,
                                                 '515': 0,
                                                 '516': 0,
                                                 '517': 0,
                                                 '518': 0,
                                                 '519': 0,
                                                 '520': 0,
                                                 '521': 0,
                                                 '522': 0,
                                                 '523': 0,
                                                 '524': 0,
                                                 '525': 0,
                                                 '526': 0,
                                                 '527': 0,
                                                 '528': 0,
                                                 '529': 0,
                                                 '530': 0,
                                                 '531': 0,
                                                 '532': 0,
                                                 '533': 0,
                                                 '534': 0,
                                                 '535': 0,
                                                 '536': 0,
                                                 '537': 0,
                                                 '538': 0,
                                                 '539': 0,
                                                 '540': 0,
                                                 '541': 0,
                                                 '542': 0,
                                                 '543': 0,
                                                 '544': 0,
                                                 '545': 0,
                                                 '546': 0,
                                                 '547': 0,
                                                 '548': 0,
                                                 '549': 0,
                                                 '550': 0,
                                                 '551': 0,
                                                 '552': 0,
                                                 '553': 0,
                                                 '554': 0,
                                                 '555': 0,
                                                 '556': 0,
                                                 '557': 0,
                                                 '558': 0,
                                                 '559': 0,
                                                 '560': 0,
                                                 '561': 0,
                                                 '562': 0,
                                                 '563': 0,
                                                 '564': 0,
                                                 '565': 0,
                                                 '566': 0,
                                                 '567': 0,
                                                 '568': 0,
                                                 '569': 0,
                                                 '570': 0,
                                                 '571': 0,
                                                 '572': 0,
                                                 '573': 0,
                                                 '574': 0,
                                                 '575': 0,
                                                 '576': 0,
                                                 '577': 0,
                                                 '578': 0,
                                                 '579': 0,
                                                 '580': 0,
                                                 '581': 0,
                                                 '582': 0,
                                                 '583': 0,
                                                 '584': 0,
                                                 '585': 0,
                                                 '586': 0,
                                                 '587': 0,
                                                 '588': 0,
                                                 '589': 0,
                                                 '590': 0,
                                                 '591': 0,
                                                 '592': 0,
                                                 '593': 0,
                                                 '594': 0,
                                                 '595': 0,
                                                 '596': 0,
                                                 '597': 0,
                                                 '598': 0,
                                                 '599': 0,
                                                 '600': 0,
                                                 '601': 0,
                                                 '602': 0,
                                                 '603': 0,
                                                 '604': 0,
                                                 '605': 0,
                                                 '606': 0,
                                                 '607': 0,
                                                 '608': 0,
                                                 '609': 0,
                                                 '610': 0,
                                                 '611': 0,
                                                 '612': 0,
                                                 '613': 0,
                                                 '614': 0,
                                                 '615': 0,
                                                 '616': 0,
                                                 '617': 0,
                                                 '618': 0,
                                                 '619': 0,
                                                 '620': 0,
                                                 '621': 0,
                                                 '622': 0,
                                                 '623': 0,
                                                 '624': 0,
                                                 '625': 0,
                                                 '626': 0,
                                                 '627': 0,
                                                 '628': 0,
                                                 '629': 0,
                                                 '630': 0,
                                                 '631': 0,
                                                 '632': 0,
                                                 '633': 0,
                                                 '634': 0,
                                                 '635': 0,
                                                 '636': 0,
                                                 '637': 0,
                                                 '638': 0,
                                                 '639': 0,
                                                 '640': 0,
                                                 '641': 0,
                                                 '642': 0,
                                                 '643': 0,
                                                 '644': 0,
                                                 '645': 0,
                                                 '646': 0,
                                                 '647': 0,
                                                 '648': 0,
                                                 '649': 0,
                                                 '650': 0,
                                                 '651': 0,
                                                 '652': 0,
                                                 '653': 0,
                                                 '654': 0,
                                                 '655': 0,
                                                 '656': 0,
                                                 '657': 0,
                                                 '658': 0,
                                                 '659': 0,
                                                 '660': 0,
                                                 '661': 0,
                                                 '662': 0,
                                                 '663': 0,
                                                 '664': 0,
                                                 '665': 0,
                                                 '666': 0,
                                                 '667': 0,
                                                 '668': 0,
                                                 '669': 0,
                                                 '670': 0,
                                                 '671': 0,
                                                 '672': 0,
                                                 '673': 0,
                                                 '674': 0,
                                                 '675': 0,
                                                 '676': 0,
                                                 '677': 0,
                                                 '678': 0,
                                                 '679': 0,
                                                 '680': 0,
                                                 '681': 0,
                                                 '682': 0,
                                                 '683': 0,
                                                 '684': 0,
                                                 '685': 0,
                                                 '686': 0,
                                                 '687': 0,
                                                 '688': 0,
                                                 '689': 0,
                                                 '690': 0,
                                                 '691': 0,
                                                 '692': 0,
                                                 '693': 0,
                                                 '694': 0,
                                                 '695': 0,
                                                 '696': 0,
                                                 '697': 0,
                                                 '698': 0,
                                                 '699': 0,
                                                 '700': 0,
                                                 '701': 0,
                                                 '702': 0,
                                                 '703': 0,
                                                 '704': 0,
                                                 '705': 0,
                                                 '706': 0,
                                                 '707': 0,
                                                 '708': 0,
                                                 '709': 0,
                                                 '710': 0,
                                                 '711': 0,
                                                 '712': 0,
                                                 '713': 0,
                                                 '714': 0,
                                                 '715': 0,
                                                 '716': 0,
                                                 '717': 0,
                                                 '718': 0,
                                                 '719': 0,
                                                 '720': 0,
                                                 '721': 0,
                                                 '722': 0,
                                                 '723': 0,
                                                 '724': 0,
                                                 '725': 0,
                                                 '726': 0,
                                                 '727': 0,
                                                 '728': 0,
                                                 '729': 0,
                                                 '730': 0,
                                                 '731': 0,
                                                 '732': 0,
                                                 '733': 0,
                                                 '734': 0,
                                                 '735': 0,
                                                 '736': 0,
                                                 '737': 0,
                                                 '738': 0,
                                                 '739': 0,
                                                 '740': 0,
                                                 '741': 0,
                                                 '742': 0,
                                                 '743': 0,
                                                 '744': 0,
                                                 '745': 0,
                                                 '746': 0,
                                                 '747': 0,
                                                 '748': 0,
                                                 '749': 0,
                                                 '750': 0,
                                                 '751': 0,
                                                 '752': 0,
                                                 '753': 0,
                                                 '754': 0,
                                                 '755': 0,
                                                 '756': 0,
                                                 '757': 0,
                                                 '758': 0,
                                                 '759': 0,
                                                 '760': 0,
                                                 '761': 0,
                                                 '762': 0,
                                                 '763': 0,
                                                 '764': 0,
                                                 '765': 0,
                                                 '766': 0,
                                                 '767': 0,
                                                 '768': 0,
                                                 '769': 0,
                                                 '770': 0,
                                                 '771': 0,
                                                 '772': 0,
                                                 '773': 0,
                                                 '774': 0,
                                                 '775': 0,
                                                 '776': 0,
                                                 '777': 0,
                                                 '778': 0,
                                                 '779': 0,
                                                 '780': 0,
                                                 '781': 0,
                                                 '782': 0,
                                                 '783': 0,
                                                 '784': 0,
                                                 '785': 0,
                                                 '786': 0,
                                                 '787': 0,
                                                 '788': 0,
                                                 '789': 0,
                                                 '790': 0,
                                                 '791': 0,
                                                 '792': 0,
                                                 '793': 0,
                                                 '794': 0,
                                                 '795': 0,
                                                 '796': 0,
                                                 '797': 0,
                                                 '798': 0,
                                                 '799': 0,
                                                 '800': 0,
                                                 '801': 0,
                                                 '802': 0,
                                                 '803': 0,
                                                 '804': 0,
                                                 '805': 0,
                                                 '806': 0,
                                                 '807': 0,
                                                 '808': 0,
                                                 '809': 0,
                                                 '810': 0,
                                                 '811': 0,
                                                 '812': 0,
                                                 '813': 0,
                                                 '814': 0,
                                                 '815': 0,
                                                 '816': 0,
                                                 '817': 0,
                                                 '818': 0,
                                                 '819': 0,
                                                 '820': 0,
                                                 '821': 0,
                                                 '822': 0,
                                                 '823': 0,
                                                 '824': 0,
                                                 '825': 0,
                                                 '826': 0,
                                                 '827': 0,
                                                 '828': 0,
                                                 '829': 0,
                                                 '830': 0,
                                                 '831': 0,
                                                 '832': 0,
                                                 '833': 0,
                                                 '834': 0,
                                                 '835': 0,
                                                 '836': 0,
                                                 '837': 0,
                                                 '838': 0,
                                                 '839': 0,
                                                 '840': 0,
                                                 '841': 0,
                                                 '842': 0,
                                                 '843': 0,
                                                 '844': 0,
                                                 '845': 0,
                                                 '846': 0,
                                                 '847': 0,
                                                 '848': 0,
                                                 '849': 0,
                                                 '850': 0,
                                                 '851': 0,
                                                 '852': 0,
                                                 '853': 0,
                                                 '854': 0,
                                                 '855': 0,
                                                 '856': 0,
                                                 '857': 0,
                                                 '858': 0,
                                                 '859': 0,
                                                 '860': 0,
                                                 '861': 0,
                                                 '862': 0,
                                                 '863': 0,
                                                 '864': 0,
                                                 '865': 0,
                                                 '866': 0,
                                                 '867': 0,
                                                 '868': 0,
                                                 '869': 0,
                                                 '870': 0,
                                                 '871': 0,
                                                 '872': 0,
                                                 '873': 0,
                                                 '874': 0,
                                                 '875': 0,
                                                 '876': 0,
                                                 '877': 0,
                                                 '878': 0,
                                                 '879': 0,
                                                 '880': 0,
                                                 '881': 0,
                                                 '882': 0,
                                                 '883': 0,
                                                 '884': 0,
                                                 '885': 0,
                                                 '886': 0,
                                                 '887': 0,
                                                 '888': 0,
                                                 '889': 0,
                                                 '890': 0,
                                                 '891': 0,
                                                 '892': 0,
                                                 '893': 0,
                                                 '894': 0,
                                                 '895': 0,
                                                 '896': 0,
                                                 '897': 0,
                                                 '898': 0,
                                                 '899': 0,
                                                 '900': 0,
                                                 '901': 0,
                                                 '902': 0,
                                                 '903': 0,
                                                 '904': 0,
                                                 '905': 0,
                                                 '906': 0,
                                                 '907': 0,
                                                 '908': 0,
                                                 '909': 0,
                                                 '910': 0,
                                                 '911': 0,
                                                 '912': 0,
                                                 '913': 0,
                                                 '914': 0,
                                                 '915': 0,
                                                 '916': 0,
                                                 '917': 0,
                                                 '918': 0,
                                                 '919': 0,
                                                 '920': 0,
                                                 '921': 0,
                                                 '922': 0,
                                                 '923': 0,
                                                 '924': 0,
                                                 '925': 0,
                                                 '926': 0,
                                                 '927': 0,
                                                 '928': 0,
                                                 '929': 0,
                                                 '930': 0,
                                                 '931': 0,
                                                 '932': 0,
                                                 '933': 0,
                                                 '934': 0,
                                                 '935': 0,
                                                 '936': 0,
                                                 '937': 0,
                                                 '938': 0,
                                                 '939': 0,
                                                 '940': 0,
                                                 '941': 0,
                                                 '942': 0,
                                                 '943': 0,
                                                 '944': 0,
                                                 '945': 0,
                                                 '946': 0,
                                                 '947': 0,
                                                 '948': 0,
                                                 '949': 0,
                                                 '950': 0,
                                                 '951': 0,
                                                 '952': 0,
                                                 '953': 0,
                                                 '954': 0,
                                                 '955': 0,
                                                 '956': 0,
                                                 '957': 0,
                                                 '958': 0,
                                                 '959': 0,
                                                 '960': 0,
                                                 '961': 0,
                                                 '962': 0,
                                                 '963': 0,
                                                 '964': 0,
                                                 '965': 0,
                                                 '966': 0,
                                                 '967': 0,
                                                 '968': 0,
                                                 '969': 0,
                                                 '970': 0,
                                                 '971': 0,
                                                 '972': 0,
                                                 '973': 0,
                                                 '974': 0,
                                                 '975': 0,
                                                 '976': 0,
                                                 '977': 0,
                                                 '978': 0,
                                                 '979': 0,
                                                 '980': 0,
                                                 '981': 0,
                                                 '982': 0,
                                                 '983': 0,
                                                 '984': 0,
                                                 '985': 0,
                                                 '986': 0,
                                                 '987': 0,
                                                 '988': 0,
                                                 '989': 0,
                                                 '990': 0,
                                                 '991': 0,
                                                 '992': 0,
                                                 '993': 0,
                                                 '994': 0,
                                                 '995': 0,
                                                 '996': 0,
                                                 '997': 0,
                                                 '998': 0,
                                                 '999': 0,
                                                 '1000': 0,
                                                 '1001': 0,
                                                 '1002': 0,
                                                 '1003': 0,
                                                 '1004': 0,
                                                 '1005': 0,
                                                 '1006': 0,
                                                 '1007': 0,
                                                 '1008': 0,
                                                 '1009': 0,
                                                 '1010': 0,
                                                 '1011': 0,
                                                 '1012': 0,
                                                 '1013': 0,
                                                 '1014': 0,
                                                 '1015': 0,
                                                 '1016': 0,
                                                 '1017': 0,
                                                 '1018': 0,
                                                 '1019': 0,
                                                 '1020': 0,
                                                 '1021': 0,
                                                 '1022': 0,
                                                 '1023': 0,
                                                 '1024': 0,
                                                 '1025': 0,
                                                 '1026': 0,
                                                 '1027': 0,
                                                 '1028': 0 },
                                              offset: 5,
                                              headerPosition: 0,
                                              lastEnd: 0 },
                                           ssl: false,
                                           _ending: false,
                                           _mode: 0,
                                           _emitMessage: false,
                                           _reader: 
                                            { offset: 90,
                                              lastChunk: false,
                                              chunk: 
                                               { '0': 84,
                                                 '1': 0,
                                                 '2': 0,
                                                 '3': 0,
                                                 '4': 29,
                                                 '5': 0,
                                                 '6': 1,
                                                 '7': 110,
                                                 '8': 97,
                                                 '9': 109,
                                                 '10': 101,
                                                 '11': 0,
                                                 '12': 0,
                                                 '13': 0,
                                                 '14': 64,
                                                 '15': 22,
                                                 '16': 0,
                                                 '17': 1,
                                                 '18': 0,
                                                 '19': 0,
                                                 '20': 4,
                                                 '21': 19,
                                                 '22': 255,
                                                 '23': 255,
                                                 '24': 0,
                                                 '25': 0,
                                                 '26': 1,
                                                 '27': 3,
                                                 '28': 0,
                                                 '29': 0,
                                                 '30': 68,
                                                 '31': 0,
                                                 '32': 0,
                                                 '33': 0,
                                                 '34': 39,
                                                 '35': 0,
                                                 '36': 1,
                                                 '37': 0,
                                                 '38': 0,
                                                 '39': 0,
                                                 '40': 29,
                                                 '41': 50,
                                                 '42': 48,
                                                 '43': 49,
                                                 '44': 56,
                                                 '45': 48,
                                                 '46': 54,
                                                 '47': 48,
                                                 '48': 56,
                                                 '49': 49,
                                                 '50': 55,
                                                 '51': 51,
                                                 '52': 53,
                                                 '53': 49,
                                                 '54': 54,
                                                 '55': 45,
                                                 '56': 99,
                                                 '57': 114,
                                                 '58': 101,
                                                 '59': 97,
                                                 '60': 116,
                                                 '61': 101,
                                                 '62': 45,
                                                 '63': 117,
                                                 '64': 115,
                                                 '65': 101,
                                                 '66': 114,
                                                 '67': 46,
                                                 '68': 106,
                                                 '69': 115,
                                                 '70': 67,
                                                 '71': 0,
                                                 '72': 0,
                                                 '73': 0,
                                                 '74': 13,
                                                 '75': 83,
                                                 '76': 69,
                                                 '77': 76,
                                                 '78': 69,
                                                 '79': 67,
                                                 '80': 84,
                                                 '81': 32,
                                                 '82': 49,
                                                 '83': 0,
                                                 '84': 90,
                                                 '85': 0,
                                                 '86': 0,
                                                 '87': 0,
                                                 '88': 5,
                                                 '89': 73 },
                                              chunkLength: 90,
                                              headerSize: 1,
                                              lengthPadding: -4,
                                              header: 90 } },
                                        queryQueue: [],
                                        binary: false,
                                        processID: 27880,
                                        secretKey: -39284044,
                                        ssl: false,
                                        activeQuery: null,
                                        readyForQuery: true,
                                        hasExecuted: true },
                                     state: 'IDLE' } },
                               tail: 
                                { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]["dialect"]["connectionManager"]["pool"]["_availableObjects"]["_list"]["head"]' },
                               length: 1 } },
                         _testOnBorrowResources: {},
                         _testOnReturnResources: {},
                         _validationOperations: {},
                         _allObjects: {},
                         _resourceLoans: {},
                         _evictionIterator: 
                          { _list: 
                             { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]["dialect"]["connectionManager"]["pool"]["_availableObjects"]["_list"]' },
                            _direction: 'next',
                            _startPosition: 'head',
                            _started: false,
                            _cursor: null,
                            _done: false },
                         _evictor: {},
                         _scheduledEviction: 
                          { _called: false,
                            _idleTimeout: 10000,
                            _idlePrev: 
                             { _idleNext: 
                                { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]["dialect"]["connectionManager"]["pool"]["_scheduledEviction"]' },
                               _idlePrev: 
                                { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]["dialect"]["connectionManager"]["pool"]["_scheduledEviction"]' },
                               _unrefed: false,
                               msecs: 10000,
                               nextTick: false,
                               _timer: 
                                { _list: 
                                   { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]["dialect"]["connectionManager"]["pool"]["_scheduledEviction"]["_idlePrev"]' } } },
                            _idleNext: 
                             { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]["dialect"]["connectionManager"]["pool"]["_scheduledEviction"]["_idlePrev"]' },
                            _idleStart: 555,
                            _onTimeout: [Function],
                            _timerArgs: undefined,
                            _repeat: null,
                            _destroyed: false } },
                      lib: 
                       { defaults: 
                          { host: 'localhost',
                            user: 'ecarzoglio',
                            database: 'ecarzoglio',
                            password: null,
                            connectionString: undefined,
                            port: 5432,
                            rows: 0,
                            binary: false,
                            max: 10,
                            idleTimeoutMillis: 30000,
                            client_encoding: '',
                            ssl: false,
                            application_name: undefined,
                            fallback_application_name: undefined,
                            parseInputDatesAsUTC: false,
                            statement_timeout: false,
                            parseInt8: undefined },
                         Client: 
                          { [Function: Client]
                            super_: 
                             { [Function: EventEmitter]
                               EventEmitter: [Circular],
                               usingDomains: false,
                               defaultMaxListeners: [Getter/Setter],
                               init: [Function],
                               listenerCount: [Function] },
                            Query: 
                             { [Function: Query]
                               super_: 
                                { [Function: EventEmitter]
                                  EventEmitter: [Circular],
                                  usingDomains: false,
                                  defaultMaxListeners: [Getter/Setter],
                                  init: [Function],
                                  listenerCount: [Function] } } },
                         Query: 
                          { [Function: Query]
                            super_: 
                             { [Function: EventEmitter]
                               EventEmitter: [Circular],
                               usingDomains: false,
                               defaultMaxListeners: [Getter/Setter],
                               init: [Function],
                               listenerCount: [Function] } },
                         Pool: { [Function: BoundPool] super_: [Function: Pool] },
                         _pools: [],
                         Connection: 
                          { [Function: Connection]
                            super_: 
                             { [Function: EventEmitter]
                               EventEmitter: [Circular],
                               usingDomains: false,
                               defaultMaxListeners: [Getter/Setter],
                               init: [Function],
                               listenerCount: [Function] } },
                         types: 
                          { getTypeParser: [Function: getTypeParser],
                            setTypeParser: [Function: setTypeParser],
                            arrayParser: { create: [Function: create] } },
                         native: 
                          { defaults: 
                             { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]["dialect"]["connectionManager"]["lib"]["defaults"]' },
                            Client: 
                             { [Function]
                               Query: 
                                { [Function]
                                  super_: 
                                   { [Function: EventEmitter]
                                     EventEmitter: [Circular],
                                     usingDomains: false,
                                     defaultMaxListeners: [Getter/Setter],
                                     init: [Function],
                                     listenerCount: [Function] } },
                               super_: 
                                { [Function: EventEmitter]
                                  EventEmitter: [Circular],
                                  usingDomains: false,
                                  defaultMaxListeners: [Getter/Setter],
                                  init: [Function],
                                  listenerCount: [Function] } },
                            Query: 
                             { [Function]
                               super_: 
                                { [Function: EventEmitter]
                                  EventEmitter: [Circular],
                                  usingDomains: false,
                                  defaultMaxListeners: [Getter/Setter],
                                  init: [Function],
                                  listenerCount: [Function] } },
                            Pool: { [Function: BoundPool] super_: [Function: Pool] },
                            _pools: [],
                            Connection: 
                             { [Function: Connection]
                               super_: 
                                { [Function: EventEmitter]
                                  EventEmitter: [Circular],
                                  usingDomains: false,
                                  defaultMaxListeners: [Getter/Setter],
                                  init: [Function],
                                  listenerCount: [Function] } },
                            types: 
                             { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]["dialect"]["connectionManager"]["lib"]["types"]' } } },
                      oidMap: 
                       { '16': [Function],
                         '23': [Function],
                         '1082': [Function],
                         '1700': [Function],
                         '3904': [Function],
                         '3906': [Function],
                         '3908': [Function],
                         '3910': [Function],
                         '3912': [Function],
                         '3926': [Function] },
                      arrayOidMap: 
                       { '1000': [Function],
                         '1007': [Function],
                         '1182': [Function],
                         '1231': [Function],
                         '3905': [Function],
                         '3907': [Function],
                         '3909': [Function],
                         '3911': [Function],
                         '3913': [Function],
                         '3927': [Function] } },
                   QueryGenerator: 
                    { options: 
                       { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]["options"]' },
                      dialect: 'postgres',
                      setSearchPath: [Function: setSearchPath],
                      createSchema: [Function: createSchema],
                      dropSchema: [Function: dropSchema],
                      showSchemasQuery: [Function: showSchemasQuery],
                      versionQuery: [Function: versionQuery],
                      createTableQuery: [Function: createTableQuery],
                      dropTableQuery: [Function: dropTableQuery],
                      showTablesQuery: [Function: showTablesQuery],
                      describeTableQuery: [Function: describeTableQuery],
                      _checkValidJsonStatement: [Function: _checkValidJsonStatement],
                      jsonPathExtractionQuery: [Function: jsonPathExtractionQuery],
                      handleSequelizeMethod: [Function: handleSequelizeMethod],
                      addColumnQuery: [Function: addColumnQuery],
                      removeColumnQuery: [Function: removeColumnQuery],
                      changeColumnQuery: [Function: changeColumnQuery],
                      renameColumnQuery: [Function: renameColumnQuery],
                      fn: [Function: fn],
                      exceptionFn: [Function: exceptionFn],
                      upsertQuery: [Function: upsertQuery],
                      deleteQuery: [Function: deleteQuery],
                      showIndexesQuery: [Function: showIndexesQuery],
                      showConstraintsQuery: [Function: showConstraintsQuery],
                      removeIndexQuery: [Function: removeIndexQuery],
                      addLimitAndOffset: [Function: addLimitAndOffset],
                      attributeToSQL: [Function: attributeToSQL],
                      deferConstraintsQuery: [Function: deferConstraintsQuery],
                      setConstraintQuery: [Function: setConstraintQuery],
                      setDeferredQuery: [Function: setDeferredQuery],
                      setImmediateQuery: [Function: setImmediateQuery],
                      attributesToSQL: [Function: attributesToSQL],
                      createTrigger: [Function: createTrigger],
                      dropTrigger: [Function: dropTrigger],
                      renameTrigger: [Function: renameTrigger],
                      createFunction: [Function: createFunction],
                      dropFunction: [Function: dropFunction],
                      renameFunction: [Function: renameFunction],
                      databaseConnectionUri: [Function: databaseConnectionUri],
                      pgEscapeAndQuote: [Function: pgEscapeAndQuote],
                      expandFunctionParamList: [Function: expandFunctionParamList],
                      expandOptions: [Function: expandOptions],
                      decodeTriggerEventType: [Function: decodeTriggerEventType],
                      triggerEventTypeIsConstraint: [Function: triggerEventTypeIsConstraint],
                      expandTriggerEventSpec: [Function: expandTriggerEventSpec],
                      pgEnumName: [Function: pgEnumName],
                      pgListEnums: [Function: pgListEnums],
                      pgEnum: [Function: pgEnum],
                      pgEnumAdd: [Function: pgEnumAdd],
                      pgEnumDrop: [Function: pgEnumDrop],
                      fromArray: [Function: fromArray],
                      padInt: [Function: padInt],
                      dataTypeMapping: [Function: dataTypeMapping],
                      quoteIdentifier: [Function: quoteIdentifier],
                      getForeignKeysQuery: [Function: getForeignKeysQuery],
                      _getForeignKeyReferencesQueryPrefix: [Function: _getForeignKeyReferencesQueryPrefix],
                      getForeignKeyReferencesQuery: [Function: getForeignKeyReferencesQuery],
                      getForeignKeyReferenceQuery: [Function: getForeignKeyReferenceQuery],
                      dropForeignKeyQuery: [Function: dropForeignKeyQuery],
                      setAutocommitQuery: [Function: setAutocommitQuery],
                      _templateSettings: 
                       { escape: /<%-([\s\S]+?)%>/g,
                         evaluate: /<%([\s\S]+?)%>/g,
                         interpolate: /<%=([\s\S]+?)%>/g,
                         variable: '',
                         imports: 
                          { _: 
                             { [Function: lodash]
                               templateSettings: 
                                { escape: /<%-([\s\S]+?)%>/g,
                                  evaluate: /<%([\s\S]+?)%>/g,
                                  interpolate: /<%=([\s\S]+?)%>/g,
                                  variable: '',
                                  imports: { _: [Circular] } },
                               after: [Function: after],
                               ary: [Function: ary],
                               assign: [Function],
                               assignIn: [Function],
                               assignInWith: [Function],
                               assignWith: [Function],
                               at: [Function],
                               before: [Function: before],
                               bind: { [Function] placeholder: [Circular] },
                               bindAll: [Function],
                               bindKey: { [Function] placeholder: [Circular] },
                               castArray: [Function: castArray],
                               chain: [Function: chain],
                               chunk: [Function: chunk],
                               compact: [Function: compact],
                               concat: [Function: concat],
                               cond: [Function: cond],
                               conforms: [Function: conforms],
                               constant: [Function: constant],
                               countBy: [Function],
                               create: [Function: create],
                               curry: { [Function: curry] placeholder: [Circular] },
                               curryRight: { [Function: curryRight] placeholder: [Circular] },
                               debounce: [Function: debounce],
                               defaults: [Function],
                               defaultsDeep: [Function],
                               defer: [Function],
                               delay: [Function],
                               difference: [Function],
                               differenceBy: [Function],
                               differenceWith: [Function],
                               drop: [Function: drop],
                               dropRight: [Function: dropRight],
                               dropRightWhile: [Function: dropRightWhile],
                               dropWhile: [Function: dropWhile],
                               fill: [Function: fill],
                               filter: [Function: filter],
                               flatMap: [Function: flatMap],
                               flatMapDeep: [Function: flatMapDeep],
                               flatMapDepth: [Function: flatMapDepth],
                               flatten: [Function: flatten],
                               flattenDeep: [Function: flattenDeep],
                               flattenDepth: [Function: flattenDepth],
                               flip: [Function: flip],
                               flow: [Function],
                               flowRight: [Function],
                               fromPairs: [Function: fromPairs],
                               functions: [Function: functions],
                               functionsIn: [Function: functionsIn],
                               groupBy: [Function],
                               initial: [Function: initial],
                               intersection: [Function],
                               intersectionBy: [Function],
                               intersectionWith: [Function],
                               invert: [Function],
                               invertBy: [Function],
                               invokeMap: [Function],
                               iteratee: [Function: iteratee],
                               keyBy: [Function],
                               keys: [Function: keys],
                               keysIn: [Function: keysIn],
                               map: [Function: map],
                               mapKeys: [Function: mapKeys],
                               mapValues: [Function: mapValues],
                               matches: [Function: matches],
                               matchesProperty: [Function: matchesProperty],
                               memoize: { [Function: memoize] Cache: [Function: MapCache] },
                               merge: [Function],
                               mergeWith: [Function],
                               method: [Function],
                               methodOf: [Function],
                               mixin: [Function: mixin],
                               negate: [Function: negate],
                               nthArg: [Function: nthArg],
                               omit: [Function],
                               omitBy: [Function: omitBy],
                               once: [Function: once],
                               orderBy: [Function: orderBy],
                               over: [Function],
                               overArgs: [Function],
                               overEvery: [Function],
                               overSome: [Function],
                               partial: { [Function] placeholder: [Circular] },
                               partialRight: { [Function] placeholder: [Circular] },
                               partition: [Function],
                               pick: [Function],
                               pickBy: [Function: pickBy],
                               property: [Function: property],
                               propertyOf: [Function: propertyOf],
                               pull: [Function],
                               pullAll: [Function: pullAll],
                               pullAllBy: [Function: pullAllBy],
                               pullAllWith: [Function: pullAllWith],
                               pullAt: [Function],
                               range: [Function],
                               rangeRight: [Function],
                               rearg: [Function],
                               reject: [Function: reject],
                               remove: [Function: remove],
                               rest: [Function: rest],
                               reverse: [Function: reverse],
                               sampleSize: [Function: sampleSize],
                               set: [Function: set],
                               setWith: [Function: setWith],
                               shuffle: [Function: shuffle],
                               slice: [Function: slice],
                               sortBy: [Function],
                               sortedUniq: [Function: sortedUniq],
                               sortedUniqBy: [Function: sortedUniqBy],
                               split: [Function: split],
                               spread: [Function: spread],
                               tail: [Function: tail],
                               take: [Function: take],
                               takeRight: [Function: takeRight],
                               takeRightWhile: [Function: takeRightWhile],
                               takeWhile: [Function: takeWhile],
                               tap: [Function: tap],
                               throttle: [Function: throttle],
                               thru: [Function: thru],
                               toArray: [Function: toArray],
                               toPairs: [Function],
                               toPairsIn: [Function],
                               toPath: [Function: toPath],
                               toPlainObject: [Function: toPlainObject],
                               transform: [Function: transform],
                               unary: [Function: unary],
                               union: [Function],
                               unionBy: [Function],
                               unionWith: [Function],
                               uniq: [Function: uniq],
                               uniqBy: [Function: uniqBy],
                               uniqWith: [Function: uniqWith],
                               unset: [Function: unset],
                               unzip: [Function: unzip],
                               unzipWith: [Function: unzipWith],
                               update: [Function: update],
                               updateWith: [Function: updateWith],
                               values: [Function: values],
                               valuesIn: [Function: valuesIn],
                               without: [Function],
                               words: [Function: words],
                               wrap: [Function: wrap],
                               xor: [Function],
                               xorBy: [Function],
                               xorWith: [Function],
                               zip: [Function],
                               zipObject: [Function: zipObject],
                               zipObjectDeep: [Function: zipObjectDeep],
                               zipWith: [Function],
                               entries: [Function],
                               entriesIn: [Function],
                               extend: [Function],
                               extendWith: [Function],
                               add: [Function],
                               attempt: [Function],
                               camelCase: [Function],
                               capitalize: [Function: capitalize],
                               ceil: [Function],
                               clamp: [Function: clamp],
                               clone: [Function: clone],
                               cloneDeep: [Function: cloneDeep],
                               cloneDeepWith: [Function: cloneDeepWith],
                               cloneWith: [Function: cloneWith],
                               conformsTo: [Function: conformsTo],
                               deburr: [Function: deburr],
                               defaultTo: [Function: defaultTo],
                               divide: [Function],
                               endsWith: [Function: endsWith],
                               eq: [Function: eq],
                               escape: [Function: escape],
                               escapeRegExp: [Function: escapeRegExp],
                               every: [Function: every],
                               find: [Function],
                               findIndex: [Function: findIndex],
                               findKey: [Function: findKey],
                               findLast: [Function],
                               findLastIndex: [Function: findLastIndex],
                               findLastKey: [Function: findLastKey],
                               floor: [Function],
                               forEach: [Function: forEach],
                               forEachRight: [Function: forEachRight],
                               forIn: [Function: forIn],
                               forInRight: [Function: forInRight],
                               forOwn: [Function: forOwn],
                               forOwnRight: [Function: forOwnRight],
                               get: [Function: get],
                               gt: [Function],
                               gte: [Function],
                               has: [Function: has],
                               hasIn: [Function: hasIn],
                               head: [Function: head],
                               identity: [Function: identity],
                               includes: [Function: includes],
                               indexOf: [Function: indexOf],
                               inRange: [Function: inRange],
                               invoke: [Function],
                               isArguments: [Function: baseIsArguments],
                               isArray: [Function: isArray],
                               isArrayBuffer: [Function],
                               isArrayLike: [Function: isArrayLike],
                               isArrayLikeObject: [Function: isArrayLikeObject],
                               isBoolean: [Function: isBoolean],
                               isBuffer: [Function: isBuffer],
                               isDate: [Function],
                               isElement: [Function: isElement],
                               isEmpty: [Function: isEmpty],
                               isEqual: [Function: isEqual],
                               isEqualWith: [Function: isEqualWith],
                               isError: [Function: isError],
                               isFinite: [Function: isFinite],
                               isFunction: [Function: isFunction],
                               isInteger: [Function: isInteger],
                               isLength: [Function: isLength],
                               isMap: [Function],
                               isMatch: [Function: isMatch],
                               isMatchWith: [Function: isMatchWith],
                               isNaN: [Function: isNaN],
                               isNative: [Function: isNative],
                               isNil: [Function: isNil],
                               isNull: [Function: isNull],
                               isNumber: [Function: isNumber],
                               isObject: [Function: isObject],
                               isObjectLike: [Function: isObjectLike],
                               isPlainObject: [Function: isPlainObject],
                               isRegExp: [Function],
                               isSafeInteger: [Function: isSafeInteger],
                               isSet: [Function],
                               isString: [Function: isString],
                               isSymbol: [Function: isSymbol],
                               isTypedArray: [Function],
                               isUndefined: [Function: isUndefined],
                               isWeakMap: [Function: isWeakMap],
                               isWeakSet: [Function: isWeakSet],
                               join: [Function: join],
                               kebabCase: [Function],
                               last: [Function: last],
                               lastIndexOf: [Function: lastIndexOf],
                               lowerCase: [Function],
                               lowerFirst: [Function],
                               lt: [Function],
                               lte: [Function],
                               max: [Function: max],
                               maxBy: [Function: maxBy],
                               mean: [Function: mean],
                               meanBy: [Function: meanBy],
                               min: [Function: min],
                               minBy: [Function: minBy],
                               stubArray: [Function: stubArray],
                               stubFalse: [Function: stubFalse],
                               stubObject: [Function: stubObject],
                               stubString: [Function: stubString],
                               stubTrue: [Function: stubTrue],
                               multiply: [Function],
                               nth: [Function: nth],
                               noConflict: [Function: noConflict],
                               noop: [Function: noop],
                               now: [Function],
                               pad: [Function: pad],
                               padEnd: [Function: padEnd],
                               padStart: [Function: padStart],
                               parseInt: [Function: parseInt],
                               random: [Function: random],
                               reduce: [Function: reduce],
                               reduceRight: [Function: reduceRight],
                               repeat: [Function: repeat],
                               replace: [Function: replace],
                               result: [Function: result],
                               round: [Function],
                               runInContext: [Function: runInContext],
                               sample: [Function: sample],
                               size: [Function: size],
                               snakeCase: [Function],
                               some: [Function: some],
                               sortedIndex: [Function: sortedIndex],
                               sortedIndexBy: [Function: sortedIndexBy],
                               sortedIndexOf: [Function: sortedIndexOf],
                               sortedLastIndex: [Function: sortedLastIndex],
                               sortedLastIndexBy: [Function: sortedLastIndexBy],
                               sortedLastIndexOf: [Function: sortedLastIndexOf],
                               startCase: [Function],
                               startsWith: [Function: startsWith],
                               subtract: [Function],
                               sum: [Function: sum],
                               sumBy: [Function: sumBy],
                               template: [Function: template],
                               times: [Function: times],
                               toFinite: [Function: toFinite],
                               toInteger: [Function: toInteger],
                               toLength: [Function: toLength],
                               toLower: [Function: toLower],
                               toNumber: [Function: toNumber],
                               toSafeInteger: [Function: toSafeInteger],
                               toString: [Function: toString],
                               toUpper: [Function: toUpper],
                               trim: [Function: trim],
                               trimEnd: [Function: trimEnd],
                               trimStart: [Function: trimStart],
                               truncate: [Function: truncate],
                               unescape: [Function: unescape],
                               uniqueId: [Function: uniqueId],
                               upperCase: [Function],
                               upperFirst: [Function],
                               each: [Function: forEach],
                               eachRight: [Function: forEachRight],
                               first: [Function: head],
                               VERSION: '4.17.10' } } },
                      extractTableDetails: [Function: extractTableDetails],
                      addSchema: [Function: addSchema],
                      renameTableQuery: [Function: renameTableQuery],
                      insertQuery: [Function: insertQuery],
                      bulkInsertQuery: [Function: bulkInsertQuery],
                      updateQuery: [Function: updateQuery],
                      arithmeticQuery: [Function: arithmeticQuery],
                      nameIndexes: [Function: nameIndexes],
                      addIndexQuery: [Function: addIndexQuery],
                      addConstraintQuery: [Function: addConstraintQuery],
                      getConstraintSnippet: [Function: getConstraintSnippet],
                      removeConstraintQuery: [Function: removeConstraintQuery],
                      quoteTable: [Function: quoteTable],
                      quote: [Function: quote],
                      quoteIdentifiers: [Function: quoteIdentifiers],
                      escape: [Function: escape],
                      selectQuery: [Function: selectQuery],
                      escapeAttributes: [Function: escapeAttributes],
                      generateInclude: [Function: generateInclude],
                      generateJoin: [Function: generateJoin],
                      generateThroughJoin: [Function: generateThroughJoin],
                      _generateSubQueryFilter: [Function: _generateSubQueryFilter],
                      _getRequiredClosure: [Function: _getRequiredClosure],
                      getQueryOrders: [Function: getQueryOrders],
                      selectFromTableFragment: [Function: selectFromTableFragment],
                      setIsolationLevelQuery: [Function: setIsolationLevelQuery],
                      generateTransactionId: [Function: generateTransactionId],
                      startTransactionQuery: [Function: startTransactionQuery],
                      commitTransactionQuery: [Function: commitTransactionQuery],
                      rollbackTransactionQuery: [Function: rollbackTransactionQuery],
                      whereQuery: [Function: whereQuery],
                      whereItemsQuery: [Function: whereItemsQuery],
                      OperatorMap: {},
                      OperatorsAliasMap: 
                       { ne: Symbol(ne),
                         not: Symbol(not),
                         in: Symbol(in),
                         notIn: Symbol(notIn),
                         gte: Symbol(gte),
                         gt: Symbol(gt),
                         lte: Symbol(lte),
                         lt: Symbol(lt),
                         like: Symbol(like),
                         ilike: Symbol(iLike),
                         '$ilike': Symbol(iLike),
                         nlike: Symbol(notLike),
                         '$notlike': Symbol(notLike),
                         notilike: Symbol(notILike),
                         '..': Symbol(between),
                         between: Symbol(between),
                         '!..': Symbol(notBetween),
                         notbetween: Symbol(notBetween),
                         nbetween: Symbol(notBetween),
                         overlap: Symbol(overlap),
                         '&&': Symbol(overlap),
                         '@>': Symbol(contains),
                         '<@': Symbol(contained),
                         '$eq': Symbol(eq),
                         '$ne': Symbol(ne),
                         '$gte': Symbol(gte),
                         '$gt': Symbol(gt),
                         '$lte': Symbol(lte),
                         '$lt': Symbol(lt),
                         '$not': Symbol(not),
                         '$in': Symbol(in),
                         '$notIn': Symbol(notIn),
                         '$is': Symbol(is),
                         '$like': Symbol(like),
                         '$notLike': Symbol(notLike),
                         '$iLike': Symbol(iLike),
                         '$notILike': Symbol(notILike),
                         '$regexp': Symbol(regexp),
                         '$notRegexp': Symbol(notRegexp),
                         '$iRegexp': Symbol(iRegexp),
                         '$notIRegexp': Symbol(notIRegexp),
                         '$between': Symbol(between),
                         '$notBetween': Symbol(notBetween),
                         '$overlap': Symbol(overlap),
                         '$contains': Symbol(contains),
                         '$contained': Symbol(contained),
                         '$adjacent': Symbol(adjacent),
                         '$strictLeft': Symbol(strictLeft),
                         '$strictRight': Symbol(strictRight),
                         '$noExtendRight': Symbol(noExtendRight),
                         '$noExtendLeft': Symbol(noExtendLeft),
                         '$and': Symbol(and),
                         '$or': Symbol(or),
                         '$any': Symbol(any),
                         '$all': Symbol(all),
                         '$values': Symbol(values),
                         '$col': Symbol(col),
                         '$raw': Symbol(raw) },
                      setOperatorsAliases: [Function: setOperatorsAliases],
                      whereItemQuery: [Function: whereItemQuery],
                      _findField: [Function: _findField],
                      _replaceAliases: [Function: _replaceAliases],
                      _whereGroupBind: [Function: _whereGroupBind],
                      _whereBind: [Function: _whereBind],
                      _whereJSON: [Function: _whereJSON],
                      _traverseJSON: [Function: _traverseJSON],
                      _toJSONValue: [Function: _toJSONValue],
                      _castKey: [Function: _castKey],
                      _getJsonCast: [Function: _getJsonCast],
                      _joinKeyValue: [Function: _joinKeyValue],
                      _getSafeKey: [Function: _getSafeKey],
                      _prefixKey: [Function: _prefixKey],
                      _whereParseSingleValueObject: [Function: _whereParseSingleValueObject],
                      getWhereConditions: [Function: getWhereConditions],
                      parseConditionObject: [Function: parseConditionObject],
                      isIdentifierQuoted: [Function: isIdentifierQuoted],
                      booleanValue: [Function: booleanValue],
                      _dialect: 
                       { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]["dialect"]' },
                      sequelize: 
                       { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]' },
                      typeValidation: undefined } },
                queryInterface: 
                 { sequelize: 
                    { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]' },
                   QueryGenerator: 
                    { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]["dialect"]["QueryGenerator"]' } },
                models: { User: User, SequelizeMeta: SequelizeMeta },
                modelManager: 
                 { models: [ User, SequelizeMeta ],
                   sequelize: 
                    { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]' } },
                connectionManager: 
                 { '$ref': '$["message"][0]["instance"]["_modelOptions"]["sequelize"]["dialect"]["connectionManager"]' },
                importCache: 
                 { '/home/ecarzoglio/Documents/node-ex/app/models/user.js': User },
                test: 
                 { _trackRunningQueries: false,
                   _runningQueries: 0,
                   trackRunningQueries: [Function: trackRunningQueries],
                   verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
             hooks: {},
             uniqueKeys: 
              { Users_email_unique: 
                 { fields: [ 'email' ],
                   msg: null,
                   name: 'Users_email_unique',
                   column: 'email',
                   customIndex: false } } },
          _options: 
           { isNewRecord: true,
             _schema: null,
             _schemaDelimiter: '',
             attributes: undefined,
             include: undefined,
             raw: undefined,
             silent: undefined },
          __eagerlyLoadedAssociations: [],
          isNewRecord: true },
       validatorKey: 'is_null',
       validatorName: null,
       validatorArgs: [] },
     { message: 'User.lastName cannot be null',
       type: 'notNull Violation',
       path: 'lastName',
       value: null,
       origin: 'CORE',
       instance: { '$ref': '$["message"][0]["instance"]' },
       validatorKey: 'is_null',
       validatorName: null,
       validatorArgs: [] },
     { message: 'User.email cannot be null',
       type: 'notNull Violation',
       path: 'email',
       value: null,
       origin: 'CORE',
       instance: { '$ref': '$["message"][0]["instance"]' },
       validatorKey: 'is_null',
       validatorName: null,
       validatorArgs: [] },
     { message: 'User.password cannot be null',
       type: 'notNull Violation',
       path: 'password',
       value: null,
       origin: 'CORE',
       instance: { '$ref': '$["message"][0]["instance"]' },
       validatorKey: 'is_null',
       validatorName: null,
       validatorArgs: [] } ],
  internalCode: 'saving_error' }
09:38:08 - info: Listening on port: 8080
09:38:50 - info: Listening on port: 8080
09:39:03 - info: Listening on port: 8080
09:43:23 - info: Listening on port: 8080
09:47:52 - info: Listening on port: 8080
09:48:02 - error:  TypeError: Cannot read property 'then' of undefined
    at exports.create (/home/ecarzoglio/Documents/node-ex/app/controllers/users.js:15:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:137:13)
    at Route.dispatch (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:112:3)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:281:22
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at logger (/home/ecarzoglio/Documents/node-ex/node_modules/morgan/index.js:144:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:317:13)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at /home/ecarzoglio/Documents/node-ex/node_modules/body-parser/lib/read.js:130:5
    at invokeCallback (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:224:16)
    at done (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:213:7)
    at IncomingMessage.onEnd (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:273:7)
    at IncomingMessage.emit (events.js:180:13)
    at endReadableNT (_stream_readable.js:1106:12)
    at process._tickCallback (internal/process/next_tick.js:178:19)
09:48:11 - info: Listening on port: 8080
09:48:12 - error:  TypeError: Cannot read property 'then' of undefined
    at exports.create (/home/ecarzoglio/Documents/node-ex/app/controllers/users.js:15:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:137:13)
    at Route.dispatch (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:112:3)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:281:22
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at logger (/home/ecarzoglio/Documents/node-ex/node_modules/morgan/index.js:144:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:317:13)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at /home/ecarzoglio/Documents/node-ex/node_modules/body-parser/lib/read.js:130:5
    at invokeCallback (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:224:16)
    at done (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:213:7)
    at IncomingMessage.onEnd (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:273:7)
    at IncomingMessage.emit (events.js:180:13)
    at endReadableNT (_stream_readable.js:1106:12)
    at process._tickCallback (internal/process/next_tick.js:178:19)
09:48:20 - info: Listening on port: 8080
09:48:22 - error:  TypeError: Cannot read property 'then' of undefined
    at exports.create (/home/ecarzoglio/Documents/node-ex/app/controllers/users.js:15:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:137:13)
    at Route.dispatch (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:112:3)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:281:22
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at logger (/home/ecarzoglio/Documents/node-ex/node_modules/morgan/index.js:144:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:317:13)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at /home/ecarzoglio/Documents/node-ex/node_modules/body-parser/lib/read.js:130:5
    at invokeCallback (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:224:16)
    at done (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:213:7)
    at IncomingMessage.onEnd (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:273:7)
    at IncomingMessage.emit (events.js:180:13)
    at endReadableNT (_stream_readable.js:1106:12)
    at process._tickCallback (internal/process/next_tick.js:178:19)
09:48:23 - error:  TypeError: Cannot read property 'then' of undefined
    at exports.create (/home/ecarzoglio/Documents/node-ex/app/controllers/users.js:15:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:137:13)
    at Route.dispatch (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:112:3)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:281:22
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at logger (/home/ecarzoglio/Documents/node-ex/node_modules/morgan/index.js:144:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:317:13)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at /home/ecarzoglio/Documents/node-ex/node_modules/body-parser/lib/read.js:130:5
    at invokeCallback (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:224:16)
    at done (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:213:7)
    at IncomingMessage.onEnd (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:273:7)
    at IncomingMessage.emit (events.js:180:13)
    at endReadableNT (_stream_readable.js:1106:12)
    at process._tickCallback (internal/process/next_tick.js:178:19)
09:48:43 - info: Listening on port: 8080
09:48:52 - info: Listening on port: 8080
09:49:30 - info: Listening on port: 8080
09:49:32 - info: Listening on port: 8080
09:57:41 - info: Listening on port: 8080
09:58:32 - info: Listening on port: 8080
09:59:16 - info: Listening on port: 8080
10:03:03 - info: Listening on port: 8080
10:03:10 - error:  ReferenceError: saltRounds is not defined
    at Function.User.createModel (/home/ecarzoglio/Documents/node-ex/app/models/user.js:43:26)
    at exports.create (/home/ecarzoglio/Documents/node-ex/app/controllers/users.js:14:8)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:137:13)
    at Route.dispatch (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:112:3)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:281:22
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at logger (/home/ecarzoglio/Documents/node-ex/node_modules/morgan/index.js:144:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:317:13)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at /home/ecarzoglio/Documents/node-ex/node_modules/body-parser/lib/read.js:130:5
    at invokeCallback (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:224:16)
    at done (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:213:7)
    at IncomingMessage.onEnd (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:273:7)
    at IncomingMessage.emit (events.js:180:13)
    at endReadableNT (_stream_readable.js:1106:12)
    at process._tickCallback (internal/process/next_tick.js:178:19)
10:03:30 - info: Listening on port: 8080
10:03:32 - error:  TypeError: Cannot read property 'then' of undefined
    at exports.create (/home/ecarzoglio/Documents/node-ex/app/controllers/users.js:15:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:137:13)
    at Route.dispatch (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:112:3)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:281:22
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at logger (/home/ecarzoglio/Documents/node-ex/node_modules/morgan/index.js:144:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:317:13)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at /home/ecarzoglio/Documents/node-ex/node_modules/body-parser/lib/read.js:130:5
    at invokeCallback (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:224:16)
    at done (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:213:7)
    at IncomingMessage.onEnd (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:273:7)
    at IncomingMessage.emit (events.js:180:13)
    at endReadableNT (_stream_readable.js:1106:12)
    at process._tickCallback (internal/process/next_tick.js:178:19)
10:03:59 - info: Listening on port: 8080
10:04:03 - error:  TypeError: Cannot read property 'then' of undefined
    at exports.create (/home/ecarzoglio/Documents/node-ex/app/controllers/users.js:15:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:137:13)
    at Route.dispatch (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:112:3)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:281:22
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at logger (/home/ecarzoglio/Documents/node-ex/node_modules/morgan/index.js:144:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:317:13)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at /home/ecarzoglio/Documents/node-ex/node_modules/body-parser/lib/read.js:130:5
    at invokeCallback (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:224:16)
    at done (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:213:7)
    at IncomingMessage.onEnd (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:273:7)
    at IncomingMessage.emit (events.js:180:13)
    at endReadableNT (_stream_readable.js:1106:12)
    at process._tickCallback (internal/process/next_tick.js:178:19)
10:05:01 - info: Listening on port: 8080
10:05:06 - error:  TypeError: Cannot read property 'then' of undefined
    at exports.create (/home/ecarzoglio/Documents/node-ex/app/controllers/users.js:15:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:137:13)
    at Route.dispatch (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:112:3)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:281:22
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at logger (/home/ecarzoglio/Documents/node-ex/node_modules/morgan/index.js:144:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:317:13)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at /home/ecarzoglio/Documents/node-ex/node_modules/body-parser/lib/read.js:130:5
    at invokeCallback (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:224:16)
    at done (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:213:7)
    at IncomingMessage.onEnd (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:273:7)
    at IncomingMessage.emit (events.js:180:13)
    at endReadableNT (_stream_readable.js:1106:12)
    at process._tickCallback (internal/process/next_tick.js:178:19)
10:05:32 - info: Listening on port: 8080
10:05:36 - error:  TypeError: Cannot read property 'then' of undefined
    at exports.create (/home/ecarzoglio/Documents/node-ex/app/controllers/users.js:15:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:137:13)
    at Route.dispatch (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:112:3)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:281:22
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at logger (/home/ecarzoglio/Documents/node-ex/node_modules/morgan/index.js:144:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:317:13)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at /home/ecarzoglio/Documents/node-ex/node_modules/body-parser/lib/read.js:130:5
    at invokeCallback (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:224:16)
    at done (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:213:7)
    at IncomingMessage.onEnd (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:273:7)
    at IncomingMessage.emit (events.js:180:13)
    at endReadableNT (_stream_readable.js:1106:12)
    at process._tickCallback (internal/process/next_tick.js:178:19)
10:08:43 - info: Listening on port: 8080
10:08:52 - error:  TypeError: Cannot read property 'then' of undefined
    at exports.create (/home/ecarzoglio/Documents/node-ex/app/controllers/users.js:15:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:137:13)
    at Route.dispatch (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:112:3)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:281:22
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at logger (/home/ecarzoglio/Documents/node-ex/node_modules/morgan/index.js:144:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:317:13)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at /home/ecarzoglio/Documents/node-ex/node_modules/body-parser/lib/read.js:130:5
    at invokeCallback (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:224:16)
    at done (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:213:7)
    at IncomingMessage.onEnd (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:273:7)
    at IncomingMessage.emit (events.js:180:13)
    at endReadableNT (_stream_readable.js:1106:12)
    at process._tickCallback (internal/process/next_tick.js:178:19)
10:09:16 - info: Listening on port: 8080
10:09:26 - error:  TypeError: Cannot read property 'then' of undefined
    at exports.create (/home/ecarzoglio/Documents/node-ex/app/controllers/users.js:15:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:137:13)
    at Route.dispatch (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:112:3)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:281:22
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at logger (/home/ecarzoglio/Documents/node-ex/node_modules/morgan/index.js:144:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:317:13)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at /home/ecarzoglio/Documents/node-ex/node_modules/body-parser/lib/read.js:130:5
    at invokeCallback (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:224:16)
    at done (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:213:7)
    at IncomingMessage.onEnd (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:273:7)
    at IncomingMessage.emit (events.js:180:13)
    at endReadableNT (_stream_readable.js:1106:12)
    at process._tickCallback (internal/process/next_tick.js:178:19)
10:13:25 - info: Listening on port: 8080
10:13:30 - info: Listening on port: 8080
10:24:17 - info: Listening on port: 8080
10:34:25 - info: Listening on port: 8080
10:34:28 - info: Listening on port: 8080
10:34:34 - error:  TypeError: Cannot read property 'then' of undefined
    at exports.create (/home/ecarzoglio/Documents/node-ex/app/controllers/users.js:15:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:137:13)
    at Route.dispatch (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:112:3)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:281:22
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at logger (/home/ecarzoglio/Documents/node-ex/node_modules/morgan/index.js:144:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:317:13)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at /home/ecarzoglio/Documents/node-ex/node_modules/body-parser/lib/read.js:130:5
    at invokeCallback (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:224:16)
    at done (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:213:7)
    at IncomingMessage.onEnd (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:273:7)
    at IncomingMessage.emit (events.js:180:13)
    at endReadableNT (_stream_readable.js:1106:12)
    at process._tickCallback (internal/process/next_tick.js:178:19)
10:35:41 - info: Listening on port: 8080
10:35:43 - info: Listening on port: 8080
10:36:18 - info: Listening on port: 8080
10:36:53 - info: Listening on port: 8080
10:37:31 - info: Listening on port: 8080
10:37:37 - info: Listening on port: 8080
10:37:42 - error:  TypeError: User.createModel is not a function
    at exports.create (/home/ecarzoglio/Documents/node-ex/app/controllers/users.js:14:8)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:137:13)
    at Route.dispatch (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:112:3)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:281:22
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at logger (/home/ecarzoglio/Documents/node-ex/node_modules/morgan/index.js:144:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:317:13)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at /home/ecarzoglio/Documents/node-ex/node_modules/body-parser/lib/read.js:130:5
    at invokeCallback (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:224:16)
    at done (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:213:7)
    at IncomingMessage.onEnd (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:273:7)
    at IncomingMessage.emit (events.js:180:13)
    at endReadableNT (_stream_readable.js:1106:12)
    at process._tickCallback (internal/process/next_tick.js:178:19)
10:37:51 - info: Listening on port: 8080
10:47:29 - info: Listening on port: 8080
10:49:18 - info: Listening on port: 8080
10:51:30 - info: Listening on port: 8080
10:51:38 - info: Listening on port: 8080
10:51:45 - info: Listening on port: 8080
10:51:53 - info: Listening on port: 8080
10:51:59 - error:  TypeError: Cannot read property 'then' of undefined
    at exports.create (/home/ecarzoglio/Documents/node-ex/app/controllers/users.js:15:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:137:13)
    at Route.dispatch (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:112:3)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:281:22
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at logger (/home/ecarzoglio/Documents/node-ex/node_modules/morgan/index.js:144:5)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:317:13)
    at /home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:335:12)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/index.js:275:10)
    at /home/ecarzoglio/Documents/node-ex/node_modules/body-parser/lib/read.js:130:5
    at invokeCallback (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:224:16)
    at done (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:213:7)
    at IncomingMessage.onEnd (/home/ecarzoglio/Documents/node-ex/node_modules/raw-body/index.js:273:7)
    at IncomingMessage.emit (events.js:180:13)
    at endReadableNT (_stream_readable.js:1106:12)
    at process._tickCallback (internal/process/next_tick.js:178:19)
10:52:30 - info: Listening on port: 8080
10:52:46 - info: Listening on port: 8080
11:00:06 - info: Listening on port: 8080
11:06:24 - info: Listening on port: 8080
11:08:52 - info: Listening on port: 8080
11:09:39 - info: Listening on port: 8080
11:31:23 - info: Listening on port: 8080
11:35:19 - info: Listening on port: 8080
11:45:27 - info: Listening on port: 8080
14:39:24 - info: Listening on port: 8080
14:40:53 - info: Listening on port: 8080
14:41:12 - info: Listening on port: 8080
14:47:57 - info: Listening on port: 8080
14:48:33 - info: Listening on port: 8080
14:49:18 - info: Listening on port: 8080
14:50:09 - info: Listening on port: 8080
14:50:21 - error:  TypeError: Cannot read property 'body' of undefined
    at Object.exports.create (/home/ecarzoglio/Documents/node-ex/app/controllers/users.js:10:20)
    at app.post (/home/ecarzoglio/Documents/node-ex/app/routes.js:17:12)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:137:13)
    at runner.then.errors (/home/ecarzoglio/Documents/node-ex/node_modules/express-validator/check/check.js:18:7)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:182:7)
14:50:40 - info: Listening on port: 8080
14:51:18 - info: Listening on port: 8080
14:51:38 - info: Listening on port: 8080
14:52:44 - info: Listening on port: 8080
14:52:49 - error:  ReferenceError: next is not defined
    at app.post (/home/ecarzoglio/Documents/node-ex/app/routes.js:16:31)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:137:13)
    at runner.then.errors (/home/ecarzoglio/Documents/node-ex/node_modules/express-validator/check/check.js:18:7)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:182:7)
14:52:56 - info: Listening on port: 8080
14:53:35 - info: Listening on port: 8080
14:54:38 - info: Listening on port: 8080
14:56:24 - info: Listening on port: 8080
15:02:58 - info: Listening on port: 8080
15:04:20 - info: Listening on port: 8080
15:05:29 - info: Listening on port: 8080
15:07:35 - info: Listening on port: 8080
15:08:19 - info: Listening on port: 8080
15:08:42 - info: Listening on port: 8080
15:09:12 - info: Listening on port: 8080
15:09:16 - error:  ReferenceError: validationResult is not defined
    at exports.create (/home/ecarzoglio/Documents/node-ex/app/controllers/users.js:20:20)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:137:13)
    at runner.then.errors (/home/ecarzoglio/Documents/node-ex/node_modules/express-validator/check/check.js:18:7)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:182:7)
15:11:19 - info: Listening on port: 8080
15:11:23 - error:  TypeError: errors.isEmpty is not a function
    at exports.create (/home/ecarzoglio/Documents/node-ex/app/controllers/users.js:20:15)
    at Layer.handle [as handle_request] (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/ecarzoglio/Documents/node-ex/node_modules/express/lib/router/route.js:137:13)
    at runner.then.errors (/home/ecarzoglio/Documents/node-ex/node_modules/express-validator/check/check.js:18:7)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:182:7)
15:12:11 - info: Listening on port: 8080
15:12:21 - info: Listening on port: 8080
15:13:20 - info: Listening on port: 8080
15:14:37 - info: Listening on port: 8080
15:15:29 - error:  ReferenceError: contains is not defined
    at Object.exports.init.app [as init] (/home/ecarzoglio/Documents/node-ex/app/routes.js:10:21)
    at Promise.resolve.then.then (/home/ecarzoglio/Documents/node-ex/app.js:52:14)
    at <anonymous>
15:15:53 - info: Listening on port: 8080
15:19:32 - info: Listening on port: 8080
15:19:43 - info: Listening on port: 8080
15:20:24 - info: Listening on port: 8080
15:20:29 - info: Listening on port: 8080
15:27:34 - info: Listening on port: 8080
